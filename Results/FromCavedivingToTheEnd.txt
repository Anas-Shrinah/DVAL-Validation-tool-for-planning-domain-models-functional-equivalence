(base) anas@anas-Latitude-7480:~/Functional-Equivalence/UsingPlanner/Code-from-KI2021-for-JAIR-new-approach$ ./experiment.py 
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014-M.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014-M.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is a macro swim
The action is not a macro photograph
The action is not a macro swim-photograph
The action is not a macro decompress
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014-M.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'prepare-tank': ['prepare-tank'], 'enter-water': ['enter-water', 'decompress'], 'pickup-tank': ['pickup-tank', 'drop-tank'], 'drop-tank': ['pickup-tank', 'drop-tank'], 'swim': [], 'photograph': ['photograph'], 'decompress': ['enter-water', 'decompress']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.08
total_task_time =  0.08
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014_invalid_macro.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014_invalid_macro.pddl
The action is not a macro prepare-tank_m
The action is not a macro enter-water_m
The action is not a macro pickup-tank_m
The action is not a macro drop-tank_m
The action is not a macro swim_m
The action is not a macro photograph_m
The action is not a macro decompress_m
The action is a macro prepare-tank-enter-water-pickup-tank_m
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014_invalid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?d 2 capacity drop-tank ?d?q1 1           is ?d 2 capacity_m drop-tank_m ?d?q1 1
 ?d 2 capacity pickup-tank ?d?q2 1         is ?d 2 capacity_m pickup-tank_m ?d?q2 1
 ?d 2 capacity drop-tank ?d?q2 1           is ?d 2 capacity_m drop-tank_m ?d?q2 1
 ?d 2 holding pickup-tank ?d?t 1           is ?d 2 holding_m pickup-tank_m ?d?t 1
 ?d 2 capacity pickup-tank ?d?q1 1         is ?d 2 capacity_m pickup-tank_m ?d?q1 1
 ?d 1 at-surface prepare-tank ?d 1         is ?d 1 at-surface_m prepare-tank_m ?d 1
 ?d 2 holding drop-tank ?d?t 1             is ?d 2 holding_m drop-tank_m ?d?t 1
 ?d 1 decompressing decompress ?d 1        is ?d 1 decompressing_m decompress_m ?d 1
 ?d 2 at-diver decompress ?d?l 1           is ?d 2 at-diver_m decompress_m ?d?l 1
 ?d 2 at-diver photograph ?d?l 1           is ?d 2 at-diver_m photograph_m ?d?l 1
 ?d 1 at-surface enter-water ?d 1          is ?d 1 at-surface_m enter-water_m ?d 1
 ?d 2 holding swim ?d?t 1                  is ?d 2 holding_m swim_m ?d?t 1
 ?d 2 at-diver swim ?d?l2 1                is ?d 2 at-diver_m swim_m ?d?l2 1
 ?d 2 at-diver pickup-tank ?d?l 1          is ?d 2 at-diver_m pickup-tank_m ?d?l 1
 ?d 2 capacity prepare-tank ?d?q2 1        is ?d 2 capacity_m prepare-tank_m ?d?q2 1
 ?d 2 holding prepare-tank ?d?t1 1         is ?d 2 holding_m prepare-tank_m ?d?t1 1
 ?d 2 at-diver drop-tank ?d?l 1            is ?d 2 at-diver_m drop-tank_m ?d?l 1
 ?d 2 at-diver enter-water ?d?l 1          is ?d 2 at-diver_m enter-water_m ?d?l 1
 ?d 2 capacity prepare-tank ?d?q1 1        is ?d 2 capacity_m prepare-tank_m ?d?q1 1
 ?d 2 at-diver swim ?d?l1 1                is ?d 2 at-diver_m swim_m ?d?l1 1
 ?d 2 holding photograph ?d?t 1            is ?d 2 holding_m photograph_m ?d?t 1
 ?l 2 at-tank pickup-tank ?t?l 2           is ?l 2 at-tank_m pickup-tank_m ?t?l 2
 ?l 2 at-diver photograph ?d?l 2           is ?l 2 at-diver_m photograph_m ?d?l 2
 ?l 1 cave-entrance decompress ?l 1        is ?l 1 cave-entrance_m decompress_m ?l 1
 ?l 2 at-diver enter-water ?d?l 2          is ?l 2 at-diver_m enter-water_m ?d?l 2
 ?l 2 at-diver decompress ?d?l 2           is ?l 2 at-diver_m decompress_m ?d?l 2
 ?l 1 cave-entrance enter-water ?l 1       is ?l 1 cave-entrance_m enter-water_m ?l 1
 ?l 1 have-photo photograph ?l 1           is ?l 1 have-photo_m photograph_m ?l 1
 ?l 2 at-diver drop-tank ?d?l 2            is ?l 2 at-diver_m drop-tank_m ?d?l 2
 ?l 2 at-diver pickup-tank ?d?l 2          is ?l 2 at-diver_m pickup-tank_m ?d?l 2
 ?l 2 at-tank drop-tank ?t?l 2             is ?l 2 at-tank_m drop-tank_m ?t?l 2
 ?t 1 full photograph ?t 1                 is ?t 1 full_m photograph_m ?t 1
 ?t 2 at-tank drop-tank ?t?l 1             is ?t 2 at-tank_m drop-tank_m ?t?l 1
 ?t 2 at-tank pickup-tank ?t?l 1           is ?t 2 at-tank_m pickup-tank_m ?t?l 1
 ?t 2 holding swim ?d?t 2                  is ?t 2 holding_m swim_m ?d?t 2
 ?t 1 full swim ?t 1                       is ?t 1 full_m swim_m ?t 1
 ?t 2 holding photograph ?d?t 2            is ?t 2 holding_m photograph_m ?d?t 2
 ?t 2 holding drop-tank ?d?t 2             is ?t 2 holding_m drop-tank_m ?d?t 2
 ?t 2 holding pickup-tank ?d?t 2           is ?t 2 holding_m pickup-tank_m ?d?t 2
 ?q1 2 capacity prepare-tank ?d?q1 2       is ?q1 2 capacity_m prepare-tank_m ?d?q1 2
 ?q1 2 capacity pickup-tank ?d?q1 2        is ?q1 2 capacity_m pickup-tank_m ?d?q1 2
 ?q1 2 next-quantity drop-tank ?q1?q2 1    is ?q1 2 next-quantity_m drop-tank_m ?q1?q2 1
 ?q1 2 next-quantity pickup-tank ?q1?q2 1  is ?q1 2 next-quantity_m pickup-tank_m ?q1?q2 1
 ?q1 2 capacity drop-tank ?d?q1 2          is ?q1 2 capacity_m drop-tank_m ?d?q1 2
 ?q1 2 next-quantity prepare-tank ?q1?q2 1  is ?q1 2 next-quantity_m prepare-tank_m ?q1?q2 1
 ?q2 2 capacity prepare-tank ?d?q2 2       is ?q2 2 capacity_m prepare-tank_m ?d?q2 2
 ?q2 2 next-quantity prepare-tank ?q1?q2 2  is ?q2 2 next-quantity_m prepare-tank_m ?q1?q2 2
 ?q2 2 next-quantity pickup-tank ?q1?q2 2  is ?q2 2 next-quantity_m pickup-tank_m ?q1?q2 2
 ?q2 2 next-quantity drop-tank ?q1?q2 2    is ?q2 2 next-quantity_m drop-tank_m ?q1?q2 2
 ?q2 2 capacity drop-tank ?d?q2 2          is ?q2 2 capacity_m drop-tank_m ?d?q2 2
 ?q2 2 capacity pickup-tank ?d?q2 2        is ?q2 2 capacity_m pickup-tank_m ?d?q2 2
 ?t1 1 full prepare-tank ?t1 1             is ?t1 1 full_m prepare-tank_m ?t1 1
 ?t1 2 holding prepare-tank ?d?t1 2        is ?t1 2 holding_m prepare-tank_m ?d?t1 2
 ?t1 1 in-storage prepare-tank ?t1 1       is ?t1 1 in-storage_m prepare-tank_m ?t1 1
 ?t1 2 next-tank prepare-tank ?t1?t2 1     is ?t1 2 next-tank_m prepare-tank_m ?t1?t2 1
 ?l1 2 at-diver swim ?d?l1 2               is ?l1 2 at-diver_m swim_m ?d?l1 2
 ?l1 2 connected swim ?l1?l2 1             is ?l1 2 connected_m swim_m ?l1?l2 1
 ?l2 2 at-diver swim ?d?l2 2               is ?l2 2 at-diver_m swim_m ?d?l2 2
 ?l2 2 connected swim ?l1?l2 2             is ?l2 2 connected_m swim_m ?l1?l2 2
 ?t2 1 in-storage prepare-tank ?t2 1       is ?t2 1 in-storage_m prepare-tank_m ?t2 1
 ?t2 2 next-tank prepare-tank ?t1?t2 2     is ?t2 2 next-tank_m prepare-tank_m ?t1?t2 2
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'drop-tank': 'drop-tank_m', 'pickup-tank': 'pickup-tank_m', 'prepare-tank': 'prepare-tank_m', 'decompress': 'decompress_m', 'photograph': 'photograph_m', 'enter-water': 'enter-water_m', 'swim': 'swim_m'}
###########################
###########################
Predicates mapping
{'capacity': 'capacity_m', 'holding': 'holding_m', 'at-surface': 'at-surface_m', 'decompressing': 'decompressing_m', 'at-diver': 'at-diver_m', 'at-tank': 'at-tank_m', 'cave-entrance': 'cave-entrance_m', 'have-photo': 'have-photo_m', 'full': 'full_m', 'next-quantity': 'next-quantity_m', 'in-storage': 'in-storage_m', 'next-tank': 'next-tank_m', 'connected': 'connected_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  6.79
planning_task_time =  0.09
total_task_time =  6.88
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014_swapped_two_variables_in_atom.pddl
The action is not a macro prepare-tank_m
The action is not a macro enter-water_m
The action is not a macro pickup-tank_m
The action is not a macro drop-tank_m
The action is not a macro swim_m
The action is not a macro photograph_m
The action is not a macro decompress_m
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014_swapped_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'prepare-tank': ['prepare-tank_m'], 'enter-water': ['decompress_m'], 'pickup-tank': ['pickup-tank_m', 'drop-tank_m'], 'drop-tank': ['pickup-tank_m', 'drop-tank_m'], 'swim': [], 'photograph': ['photograph_m'], 'decompress': ['decompress_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.08
total_task_time =  0.08
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014_swapped_position_two_variables_in_atom.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014_swapped_position_two_variables_in_atom.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014_swapped_position_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
[[0, 20], [47, 56], [83, 90], [117, 122], [149, 154], [181, 184], [211, 212], [239, 240], [267, 268]]
[[0, 21], [49, 58], [86, 94], [122, 127], [155, 160], [188, 191], [219, 220], [248, 249], [277, 278]]
first and second ranges are not the same 
[[0, 13], [28, 39], [54, 63], [78, 83], [98, 101], [116, 118], [133, 134], [149, 150], [165, 166], [181, 182], [197, 198], [213, 213], [228, 228]]
[[0, 13], [28, 39], [54, 65], [80, 85], [100, 103], [118, 120], [135, 136], [151, 152], [167, 168], [183, 184], [199, 200], [215, 215], [230, 230]]
first and second ranges XX are not the same 
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
Domain1 and Domain2 are not functionally equivalent! Because at least one primitive operator in D1 cannot be mapped to a primitive operator in D2 as per the operator-structure theorem !
At least one primitive operator in D1 cannot be mapped to a primitive operator in D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  7.89
planning_task_time =  0.09
total_task_time =  7.98
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014_swapped_two_atoms_between_two_parts.pddl
The action is not a macro prepare-tank_m
The action is not a macro enter-water_m
The action is not a macro pickup-tank_m
The action is not a macro drop-tank_m
The action is not a macro swim_m
The action is not a macro photograph_m
The action is not a macro decompress_m
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014_swapped_two_atoms_between_two_parts.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
Domain1 and Domain2 are not functionally equivalent! Because at least one primitive operator in D1 cannot be mapped to a primitive operator in D2 as per the operator-structure theorem !
At least one primitive operator in D1 cannot be mapped to a primitive operator in D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  1.18
planning_task_time =  0.09
total_task_time =  1.27
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014_valid_macro.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014_valid_macro.pddl
The action is not a macro prepare-tank_m
The action is not a macro enter-water_m
The action is not a macro pickup-tank_m
The action is not a macro drop-tank_m
The action is not a macro swim_m
The action is not a macro photograph_m
The action is not a macro decompress_m
The action is a macro prepare-tank-enter-water-pickup-tank_m
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?d 2 capacity drop-tank ?d?q1 1           is ?d 2 capacity_m drop-tank_m ?d?q1 1
 ?d 2 capacity pickup-tank ?d?q2 1         is ?d 2 capacity_m pickup-tank_m ?d?q2 1
 ?d 2 capacity drop-tank ?d?q2 1           is ?d 2 capacity_m drop-tank_m ?d?q2 1
 ?d 2 holding pickup-tank ?d?t 1           is ?d 2 holding_m pickup-tank_m ?d?t 1
 ?d 2 capacity pickup-tank ?d?q1 1         is ?d 2 capacity_m pickup-tank_m ?d?q1 1
 ?d 1 at-surface prepare-tank ?d 1         is ?d 1 at-surface_m prepare-tank_m ?d 1
 ?d 2 holding drop-tank ?d?t 1             is ?d 2 holding_m drop-tank_m ?d?t 1
 ?d 1 decompressing decompress ?d 1        is ?d 1 decompressing_m decompress_m ?d 1
 ?d 2 at-diver decompress ?d?l 1           is ?d 2 at-diver_m decompress_m ?d?l 1
 ?d 2 at-diver photograph ?d?l 1           is ?d 2 at-diver_m photograph_m ?d?l 1
 ?d 1 at-surface enter-water ?d 1          is ?d 1 at-surface_m enter-water_m ?d 1
 ?d 2 holding swim ?d?t 1                  is ?d 2 holding_m swim_m ?d?t 1
 ?d 2 at-diver swim ?d?l2 1                is ?d 2 at-diver_m swim_m ?d?l2 1
 ?d 2 at-diver pickup-tank ?d?l 1          is ?d 2 at-diver_m pickup-tank_m ?d?l 1
 ?d 2 capacity prepare-tank ?d?q2 1        is ?d 2 capacity_m prepare-tank_m ?d?q2 1
 ?d 2 holding prepare-tank ?d?t1 1         is ?d 2 holding_m prepare-tank_m ?d?t1 1
 ?d 2 at-diver drop-tank ?d?l 1            is ?d 2 at-diver_m drop-tank_m ?d?l 1
 ?d 2 at-diver enter-water ?d?l 1          is ?d 2 at-diver_m enter-water_m ?d?l 1
 ?d 2 capacity prepare-tank ?d?q1 1        is ?d 2 capacity_m prepare-tank_m ?d?q1 1
 ?d 2 at-diver swim ?d?l1 1                is ?d 2 at-diver_m swim_m ?d?l1 1
 ?d 2 holding photograph ?d?t 1            is ?d 2 holding_m photograph_m ?d?t 1
 ?l 2 at-tank pickup-tank ?t?l 2           is ?l 2 at-tank_m pickup-tank_m ?t?l 2
 ?l 2 at-diver photograph ?d?l 2           is ?l 2 at-diver_m photograph_m ?d?l 2
 ?l 1 cave-entrance decompress ?l 1        is ?l 1 cave-entrance_m decompress_m ?l 1
 ?l 2 at-diver enter-water ?d?l 2          is ?l 2 at-diver_m enter-water_m ?d?l 2
 ?l 2 at-diver decompress ?d?l 2           is ?l 2 at-diver_m decompress_m ?d?l 2
 ?l 1 cave-entrance enter-water ?l 1       is ?l 1 cave-entrance_m enter-water_m ?l 1
 ?l 1 have-photo photograph ?l 1           is ?l 1 have-photo_m photograph_m ?l 1
 ?l 2 at-diver drop-tank ?d?l 2            is ?l 2 at-diver_m drop-tank_m ?d?l 2
 ?l 2 at-diver pickup-tank ?d?l 2          is ?l 2 at-diver_m pickup-tank_m ?d?l 2
 ?l 2 at-tank drop-tank ?t?l 2             is ?l 2 at-tank_m drop-tank_m ?t?l 2
 ?t 1 full photograph ?t 1                 is ?t 1 full_m photograph_m ?t 1
 ?t 2 at-tank drop-tank ?t?l 1             is ?t 2 at-tank_m drop-tank_m ?t?l 1
 ?t 2 at-tank pickup-tank ?t?l 1           is ?t 2 at-tank_m pickup-tank_m ?t?l 1
 ?t 2 holding swim ?d?t 2                  is ?t 2 holding_m swim_m ?d?t 2
 ?t 1 full swim ?t 1                       is ?t 1 full_m swim_m ?t 1
 ?t 2 holding photograph ?d?t 2            is ?t 2 holding_m photograph_m ?d?t 2
 ?t 2 holding drop-tank ?d?t 2             is ?t 2 holding_m drop-tank_m ?d?t 2
 ?t 2 holding pickup-tank ?d?t 2           is ?t 2 holding_m pickup-tank_m ?d?t 2
 ?q1 2 capacity prepare-tank ?d?q1 2       is ?q1 2 capacity_m prepare-tank_m ?d?q1 2
 ?q1 2 capacity pickup-tank ?d?q1 2        is ?q1 2 capacity_m pickup-tank_m ?d?q1 2
 ?q1 2 next-quantity drop-tank ?q1?q2 1    is ?q1 2 next-quantity_m drop-tank_m ?q1?q2 1
 ?q1 2 next-quantity pickup-tank ?q1?q2 1  is ?q1 2 next-quantity_m pickup-tank_m ?q1?q2 1
 ?q1 2 capacity drop-tank ?d?q1 2          is ?q1 2 capacity_m drop-tank_m ?d?q1 2
 ?q1 2 next-quantity prepare-tank ?q1?q2 1  is ?q1 2 next-quantity_m prepare-tank_m ?q1?q2 1
 ?q2 2 capacity prepare-tank ?d?q2 2       is ?q2 2 capacity_m prepare-tank_m ?d?q2 2
 ?q2 2 next-quantity prepare-tank ?q1?q2 2  is ?q2 2 next-quantity_m prepare-tank_m ?q1?q2 2
 ?q2 2 next-quantity pickup-tank ?q1?q2 2  is ?q2 2 next-quantity_m pickup-tank_m ?q1?q2 2
 ?q2 2 next-quantity drop-tank ?q1?q2 2    is ?q2 2 next-quantity_m drop-tank_m ?q1?q2 2
 ?q2 2 capacity drop-tank ?d?q2 2          is ?q2 2 capacity_m drop-tank_m ?d?q2 2
 ?q2 2 capacity pickup-tank ?d?q2 2        is ?q2 2 capacity_m pickup-tank_m ?d?q2 2
 ?t1 1 full prepare-tank ?t1 1             is ?t1 1 full_m prepare-tank_m ?t1 1
 ?t1 2 holding prepare-tank ?d?t1 2        is ?t1 2 holding_m prepare-tank_m ?d?t1 2
 ?t1 1 in-storage prepare-tank ?t1 1       is ?t1 1 in-storage_m prepare-tank_m ?t1 1
 ?t1 2 next-tank prepare-tank ?t1?t2 1     is ?t1 2 next-tank_m prepare-tank_m ?t1?t2 1
 ?l1 2 at-diver swim ?d?l1 2               is ?l1 2 at-diver_m swim_m ?d?l1 2
 ?l1 2 connected swim ?l1?l2 1             is ?l1 2 connected_m swim_m ?l1?l2 1
 ?l2 2 at-diver swim ?d?l2 2               is ?l2 2 at-diver_m swim_m ?d?l2 2
 ?l2 2 connected swim ?l1?l2 2             is ?l2 2 connected_m swim_m ?l1?l2 2
 ?t2 1 in-storage prepare-tank ?t2 1       is ?t2 1 in-storage_m prepare-tank_m ?t2 1
 ?t2 2 next-tank prepare-tank ?t1?t2 2     is ?t2 2 next-tank_m prepare-tank_m ?t1?t2 2
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'drop-tank': 'drop-tank_m', 'pickup-tank': 'pickup-tank_m', 'prepare-tank': 'prepare-tank_m', 'decompress': 'decompress_m', 'photograph': 'photograph_m', 'enter-water': 'enter-water_m', 'swim': 'swim_m'}
###########################
###########################
Predicates mapping
{'capacity': 'capacity_m', 'holding': 'holding_m', 'at-surface': 'at-surface_m', 'decompressing': 'decompressing_m', 'at-diver': 'at-diver_m', 'at-tank': 'at-tank_m', 'cave-entrance': 'cave-entrance_m', 'have-photo': 'have-photo_m', 'full': 'full_m', 'next-quantity': 'next-quantity_m', 'in-storage': 'in-storage_m', 'next-tank': 'next-tank_m', 'connected': 'connected_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  8.19
planning_task_time =  0.1
total_task_time =  8.3
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between CaveDiving-seq-sat-ipc2014.pddl and CaveDiving-seq-sat-ipc2014_delete_operator.pddl
************************************************************
Removing the macros from  CaveDiving-seq-sat-ipc2014.pddl
The action is not a macro prepare-tank
The action is not a macro enter-water
The action is not a macro pickup-tank
The action is not a macro drop-tank
The action is not a macro swim
The action is not a macro photograph
The action is not a macro decompress
Removing the macros from  CaveDiving-seq-sat-ipc2014_delete_operator.pddl
The action is not a macro prepare-tank_m
The action is not a macro enter-water_m
The action is not a macro pickup-tank_m
The action is not a macro drop-tank_m
The action is not a macro swim_m
The action is not a macro photograph_m
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain CaveDiving-seq-sat-ipc2014_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.09
total_task_time =  0.09
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between blocks-strips-typed.pddl and blocks-strips-typed-M.pddl
************************************************************
Removing the macros from  blocks-strips-typed.pddl
The action is not a macro pick-up
The action is not a macro put-down
The action is not a macro stack
The action is not a macro unstack
Removing the macros from  blocks-strips-typed-M.pddl
The action is not a macro pick-up_m
The action is not a macro put-down_m
The action is a macro stack_m
The action is not a macro unstack_m
The action is not a macro pick-up-stack_m
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed-M.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'pick-up': ['pick-up_m'], 'put-down': ['put-down_m'], 'stack': [], 'unstack': ['unstack_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.06
total_task_time =  0.06
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between blocks-strips-typed.pddl and blocks-strips-typed_delete_operator.pddl
************************************************************
Removing the macros from  blocks-strips-typed.pddl
The action is not a macro pick-up
The action is not a macro put-down
The action is not a macro stack
The action is not a macro unstack
Removing the macros from  blocks-strips-typed_delete_operator.pddl
The action is not a macro pick-up_m
The action is not a macro put-down_m
The action is not a macro stack_m
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.06
total_task_time =  0.06
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between blocks-strips-typed.pddl and blocks-strips-typed_invalid_macro.pddl
************************************************************
Removing the macros from  blocks-strips-typed.pddl
The action is not a macro pick-up
The action is not a macro put-down
The action is not a macro stack
The action is not a macro unstack
Removing the macros from  blocks-strips-typed_invalid_macro.pddl
The action is not a macro pick-up_m
The action is not a macro put-down_m
The action is not a macro stack_m
The action is not a macro unstack_m
The action is not a macro pick-up-put-down-stack_m
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed_invalid_macro.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.08
total_task_time =  0.08
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between blocks-strips-typed.pddl and blocks-strips-typed_valid_macro.pddl
************************************************************
Removing the macros from  blocks-strips-typed.pddl
The action is not a macro pick-up
The action is not a macro put-down
The action is not a macro stack
The action is not a macro unstack
Removing the macros from  blocks-strips-typed_valid_macro.pddl
The action is not a macro pick-up_m
The action is not a macro put-down_m
The action is not a macro stack_m
The action is not a macro unstack_m
The action is a macro pick-up-put-down-stack_m
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?x 1 clear stack ?x 1                     is ?x 1 clear_m stack_m ?x 1
 ?x 1 ontable put-down ?x 1                is ?x 1 ontable_m put-down_m ?x 1
 ?x 1 clear pick-up ?x 1                   is ?x 1 clear_m pick-up_m ?x 1
 ?x 1 holding put-down ?x 1                is ?x 1 holding_m put-down_m ?x 1
 ?x 1 holding pick-up ?x 1                 is ?x 1 holding_m pick-up_m ?x 1
 ?x 1 clear put-down ?x 1                  is ?x 1 clear_m put-down_m ?x 1
 ?x 1 clear unstack ?x 1                   is ?x 1 clear_m unstack_m ?x 1
 ?x 2 on stack ?x?y 1                      is ?x 2 on_m stack_m ?x?y 1
 ?x 1 holding unstack ?x 1                 is ?x 1 holding_m unstack_m ?x 1
 ?x 1 holding stack ?x 1                   is ?x 1 holding_m stack_m ?x 1
 ?x 1 ontable pick-up ?x 1                 is ?x 1 ontable_m pick-up_m ?x 1
 ?x 2 on unstack ?x?y 1                    is ?x 2 on_m unstack_m ?x?y 1
 ?y 1 clear stack ?y 1                     is ?y 1 clear_m stack_m ?y 1
 ?y 2 on unstack ?x?y 2                    is ?y 2 on_m unstack_m ?x?y 2
 ?y 1 clear unstack ?y 1                   is ?y 1 clear_m unstack_m ?y 1
 ?y 2 on stack ?x?y 2                      is ?y 2 on_m stack_m ?x?y 2
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'stack': 'stack_m', 'put-down': 'put-down_m', 'pick-up': 'pick-up_m', 'unstack': 'unstack_m'}
###########################
###########################
Predicates mapping
{'clear': 'clear_m', 'ontable': 'ontable_m', 'holding': 'holding_m', 'on': 'on_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  0.19
planning_task_time =  0.06
total_task_time =  0.25
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between blocks-strips-typed.pddl and blocks-strips-typed_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  blocks-strips-typed.pddl
The action is not a macro pick-up
The action is not a macro put-down
The action is not a macro stack
The action is not a macro unstack
Removing the macros from  blocks-strips-typed_swapped_two_variables_in_atom.pddl
The action is not a macro pick-up_m
The action is not a macro put-down_m
The action is not a macro stack_m
The action is not a macro unstack_m
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed_swapped_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'pick-up': [], 'put-down': ['put-down_m'], 'stack': ['stack_m'], 'unstack': ['unstack_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.05
total_task_time =  0.05
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between blocks-strips-typed.pddl and blocks-strips-typed_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  blocks-strips-typed.pddl
The action is not a macro pick-up
The action is not a macro put-down
The action is not a macro stack
The action is not a macro unstack
Removing the macros from  blocks-strips-typed_swapped_two_atoms_between_two_parts.pddl
The action is not a macro pick-up_m
The action is not a macro put-down_m
The action is not a macro stack_m
The action is not a macro unstack_m
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain blocks-strips-typed_swapped_two_atoms_between_two_parts.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'pick-up': [], 'put-down': ['put-down_m'], 'stack': ['stack_m'], 'unstack': ['unstack_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.05
total_task_time =  0.06
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between child-snack-sequential-satisficing.pddl and child-snack-sequential-satisficing_invalid_macro.pddl
************************************************************
Removing the macros from  child-snack-sequential-satisficing.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Removing the macros from  child-snack-sequential-satisficing_invalid_macro.pddl
The action is not a macro make_sandwich_no_gluten_m
The action is not a macro make_sandwich_m
The action is not a macro put_on_tray_m
The action is not a macro serve_sandwich_no_gluten_m
The action is not a macro serve_sandwich_m
The action is not a macro move_tray_m
The action is not a macro make_sandwich_no_gluten-put_on_tray-serve_sandwich_no_gluten_m
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing_invalid_macro.pddl
Domain2 is potentially redundant
[[0, 9], [25, 33], [49, 56], [72, 75], [91, 93], [109, 109], [125, 125]]
[[0, 9], [25, 33], [49, 56], [72, 75], [91, 94], [110, 112], [128, 130], [146, 148], [164, 165], [181, 182], [198, 199], [215, 215], [231, 231]]
first and second ranges are not the same 
[[0, 7], [16, 21], [30, 33], [42, 44], [53, 54], [63, 64], [73, 74], [83, 84], [93, 94], [103, 103], [112, 112], [121, 121], [130, 130], [139, 139]]
[[0, 9], [20, 27], [38, 43], [54, 57], [68, 70], [81, 83], [94, 96], [107, 109], [120, 122], [133, 134], [145, 146], [157, 158], [169, 170], [181, 181]]
first and second ranges XX are not the same 
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?s 1 at_kitchen_sandwich make_sandwich ?s 1  is ?s 1 at_kitchen_sandwich_m make_sandwich_m ?s 1
 ?s 1 at_kitchen_sandwich put_on_tray ?s 1  is ?s 1 at_kitchen_sandwich_m put_on_tray_m ?s 1
 ?s 1 notexist make_sandwich_no_gluten ?s 1  is ?s 1 notexist_m make_sandwich_no_gluten_m ?s 1
 ?s 1 no_gluten_sandwich make_sandwich_no_gluten ?s 1  is ?s 1 no_gluten_sandwich_m make_sandwich_no_gluten_m ?s 1
 ?s 1 notexist make_sandwich ?s 1          is ?s 1 notexist_m make_sandwich_m ?s 1
 ?s 2 ontray serve_sandwich_no_gluten ?s?t 1  is ?s 2 ontray_m serve_sandwich_no_gluten_m ?s?t 1
 ?s 2 ontray serve_sandwich ?s?t 1         is ?s 2 ontray_m serve_sandwich_m ?s?t 1
 ?s 1 at_kitchen_sandwich make_sandwich_no_gluten ?s 1  is ?s 1 at_kitchen_sandwich_m make_sandwich_no_gluten_m ?s 1
 ?s 2 ontray put_on_tray ?s?t 1            is ?s 2 ontray_m put_on_tray_m ?s?t 1
 ?s 1 no_gluten_sandwich serve_sandwich_no_gluten ?s 1  is ?s 1 no_gluten_sandwich_m serve_sandwich_no_gluten_m ?s 1
 ?c 1 at_kitchen_content make_sandwich_no_gluten ?c 1  is ?b 1 at_kitchen_bread_m make_sandwich_no_gluten_m ?b 1
 ?c 1 not_allergic_gluten serve_sandwich ?c 1  is ?c 1 not_allergic_gluten_m serve_sandwich_m ?c 1
 ?c 1 no_gluten_content make_sandwich_no_gluten ?c 1  is ?b 1 no_gluten_bread_m make_sandwich_no_gluten_m ?b 1
 ?c 1 served serve_sandwich ?c 1           is ?c 1 served_m serve_sandwich_m ?c 1
 ?c 1 allergic_gluten serve_sandwich_no_gluten ?c 1  is ?c 1 allergic_gluten_m serve_sandwich_no_gluten_m ?c 1
 ?c 2 waiting serve_sandwich_no_gluten ?c?p 1  is ?c 2 waiting_m serve_sandwich_no_gluten_m ?c?p 1
 ?c 2 waiting serve_sandwich ?c?p 1        is ?c 2 waiting_m serve_sandwich_m ?c?p 1
 ?c 1 at_kitchen_content make_sandwich ?c 1  is ?b 1 at_kitchen_bread_m make_sandwich_m ?b 1
 ?c 1 served serve_sandwich_no_gluten ?c 1  is ?c 1 served_m serve_sandwich_no_gluten_m ?c 1
 ?t 2 at serve_sandwich_no_gluten ?t?p 1   is ?t 2 at_m serve_sandwich_no_gluten_m ?t?p 1
 ?t 2 ontray serve_sandwich ?s?t 2         is ?t 2 ontray_m serve_sandwich_m ?s?t 2
 ?t 2 at serve_sandwich ?t?p 1             is ?t 2 at_m serve_sandwich_m ?t?p 1
 ?t 2 ontray serve_sandwich_no_gluten ?s?t 2  is ?t 2 ontray_m serve_sandwich_no_gluten_m ?s?t 2
 ?t 1 at_kitchen_tray put_on_tray ?t 1     is ?t 1 at_kitchen_tray_m put_on_tray_m ?t 1
 ?t 2 ontray put_on_tray ?s?t 2            is ?t 2 ontray_m put_on_tray_m ?s?t 2
 ?t 2 at move_tray ?t?p2 1                 is ?t 2 at_m move_tray_m ?t?p2 1
 ?t 2 at move_tray ?t?p1 1                 is ?t 2 at_m move_tray_m ?t?p1 1
 ?p 2 at serve_sandwich_no_gluten ?t?p 2   is ?p 2 at_m serve_sandwich_no_gluten_m ?t?p 2
 ?p 2 at serve_sandwich ?t?p 2             is ?p 2 at_m serve_sandwich_m ?t?p 2
 ?p 2 waiting serve_sandwich_no_gluten ?c?p 2  is ?p 2 waiting_m serve_sandwich_no_gluten_m ?c?p 2
 ?p 2 waiting serve_sandwich ?c?p 2        is ?p 2 waiting_m serve_sandwich_m ?c?p 2
 ?b 1 at_kitchen_bread make_sandwich_no_gluten ?b 1  is ?c 1 at_kitchen_content_m make_sandwich_no_gluten_m ?c 1
 ?b 1 at_kitchen_bread make_sandwich ?b 1  is ?c 1 at_kitchen_content_m make_sandwich_m ?c 1
 ?b 1 no_gluten_bread make_sandwich_no_gluten ?b 1  is ?c 1 no_gluten_content_m make_sandwich_no_gluten_m ?c 1
 ?p1 2 at move_tray ?t?p1 2                is ?p1 2 at_m move_tray_m ?t?p1 2
 ?p2 2 at move_tray ?t?p2 2                is ?p2 2 at_m move_tray_m ?t?p2 2
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  2.24
planning_task_time =  0.09
total_task_time =  2.34
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between child-snack-sequential-satisficing.pddl and child-snack-sequential-satisficing_delete_operator.pddl
************************************************************
Removing the macros from  child-snack-sequential-satisficing.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Removing the macros from  child-snack-sequential-satisficing_delete_operator.pddl
The action is not a macro make_sandwich_no_gluten_m
The action is not a macro make_sandwich_m
The action is not a macro put_on_tray_m
The action is not a macro serve_sandwich_no_gluten_m
The action is not a macro serve_sandwich_m
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing_delete_operator.pddl
Domain2 is potentially redundant
Domain1 and Domain2 (potentially redundant) might be functionally equivalent, if the D1 operators(s) that do not have PFEPOs from D2 are found to be grouped operators!
And then these operators are removed. Then restart the algorithm on the modified D1 domain and on D2.
Ig they are functionally equivalent, then a mapping will be found. Note D2 might still have grouped operators. However this is not a problem.
A conclusive verdict cannot be returned by our method currently. The end user need to check the if the operators without PFEPOs are grouped operators or not.
Then remove those found to be grouped operators and restart the process again.
{'make_sandwich_no_gluten': ['make_sandwich_no_gluten_m'], 'make_sandwich': ['make_sandwich_m'], 'put_on_tray': ['put_on_tray_m'], 'serve_sandwich_no_gluten': ['serve_sandwich_no_gluten_m'], 'serve_sandwich': ['serve_sandwich_m'], 'move_tray': []}
At least one of D1 supposedly primitive operator does not have any PFEPO from D2!. If none of these operators are grouped, then the two domains must be not functionally equivalent. On the other hand, if some of these operators are grouped, then further check is needed to decide on the functional equivalence of the two domains. 
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.08
total_task_time =  0.08
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between child-snack-sequential-satisficing.pddl and child-snack-sequential-satisficing_valid_macro.pddl
************************************************************
Removing the macros from  child-snack-sequential-satisficing.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Removing the macros from  child-snack-sequential-satisficing_valid_macro.pddl
The action is not a macro make_sandwich_no_gluten_m
The action is not a macro make_sandwich_m
The action is not a macro put_on_tray_m
The action is not a macro serve_sandwich_no_gluten_m
The action is not a macro serve_sandwich_m
The action is not a macro move_tray_m
The action is a macro make_sandwich_no_gluten-put_on_tray-serve_sandwich_no_gluten_m
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing_valid_macro.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?s 1 at_kitchen_sandwich make_sandwich ?s 1  is ?s 1 at_kitchen_sandwich_m make_sandwich_m ?s 1
 ?s 1 at_kitchen_sandwich put_on_tray ?s 1  is ?s 1 at_kitchen_sandwich_m put_on_tray_m ?s 1
 ?s 1 notexist make_sandwich_no_gluten ?s 1  is ?s 1 notexist_m make_sandwich_no_gluten_m ?s 1
 ?s 1 no_gluten_sandwich make_sandwich_no_gluten ?s 1  is ?s 1 no_gluten_sandwich_m make_sandwich_no_gluten_m ?s 1
 ?s 1 notexist make_sandwich ?s 1          is ?s 1 notexist_m make_sandwich_m ?s 1
 ?s 2 ontray serve_sandwich_no_gluten ?s?t 1  is ?s 2 ontray_m serve_sandwich_no_gluten_m ?s?t 1
 ?s 2 ontray serve_sandwich ?s?t 1         is ?s 2 ontray_m serve_sandwich_m ?s?t 1
 ?s 1 at_kitchen_sandwich make_sandwich_no_gluten ?s 1  is ?s 1 at_kitchen_sandwich_m make_sandwich_no_gluten_m ?s 1
 ?s 2 ontray put_on_tray ?s?t 1            is ?s 2 ontray_m put_on_tray_m ?s?t 1
 ?s 1 no_gluten_sandwich serve_sandwich_no_gluten ?s 1  is ?s 1 no_gluten_sandwich_m serve_sandwich_no_gluten_m ?s 1
 ?c 1 at_kitchen_content make_sandwich_no_gluten ?c 1  is ?b 1 at_kitchen_bread_m make_sandwich_no_gluten_m ?b 1
 ?c 1 not_allergic_gluten serve_sandwich ?c 1  is ?c 1 not_allergic_gluten_m serve_sandwich_m ?c 1
 ?c 1 no_gluten_content make_sandwich_no_gluten ?c 1  is ?b 1 no_gluten_bread_m make_sandwich_no_gluten_m ?b 1
 ?c 1 served serve_sandwich ?c 1           is ?c 1 served_m serve_sandwich_m ?c 1
 ?c 1 allergic_gluten serve_sandwich_no_gluten ?c 1  is ?c 1 allergic_gluten_m serve_sandwich_no_gluten_m ?c 1
 ?c 2 waiting serve_sandwich_no_gluten ?c?p 1  is ?c 2 waiting_m serve_sandwich_no_gluten_m ?c?p 1
 ?c 2 waiting serve_sandwich ?c?p 1        is ?c 2 waiting_m serve_sandwich_m ?c?p 1
 ?c 1 at_kitchen_content make_sandwich ?c 1  is ?b 1 at_kitchen_bread_m make_sandwich_m ?b 1
 ?c 1 served serve_sandwich_no_gluten ?c 1  is ?c 1 served_m serve_sandwich_no_gluten_m ?c 1
 ?t 2 at serve_sandwich_no_gluten ?t?p 1   is ?t 2 at_m serve_sandwich_no_gluten_m ?t?p 1
 ?t 2 ontray serve_sandwich ?s?t 2         is ?t 2 ontray_m serve_sandwich_m ?s?t 2
 ?t 2 at serve_sandwich ?t?p 1             is ?t 2 at_m serve_sandwich_m ?t?p 1
 ?t 2 ontray serve_sandwich_no_gluten ?s?t 2  is ?t 2 ontray_m serve_sandwich_no_gluten_m ?s?t 2
 ?t 1 at_kitchen_tray put_on_tray ?t 1     is ?t 1 at_kitchen_tray_m put_on_tray_m ?t 1
 ?t 2 ontray put_on_tray ?s?t 2            is ?t 2 ontray_m put_on_tray_m ?s?t 2
 ?t 2 at move_tray ?t?p2 1                 is ?t 2 at_m move_tray_m ?t?p2 1
 ?t 2 at move_tray ?t?p1 1                 is ?t 2 at_m move_tray_m ?t?p1 1
 ?p 2 at serve_sandwich_no_gluten ?t?p 2   is ?p 2 at_m serve_sandwich_no_gluten_m ?t?p 2
 ?p 2 at serve_sandwich ?t?p 2             is ?p 2 at_m serve_sandwich_m ?t?p 2
 ?p 2 waiting serve_sandwich_no_gluten ?c?p 2  is ?p 2 waiting_m serve_sandwich_no_gluten_m ?c?p 2
 ?p 2 waiting serve_sandwich ?c?p 2        is ?p 2 waiting_m serve_sandwich_m ?c?p 2
 ?b 1 at_kitchen_bread make_sandwich_no_gluten ?b 1  is ?c 1 at_kitchen_content_m make_sandwich_no_gluten_m ?c 1
 ?b 1 at_kitchen_bread make_sandwich ?b 1  is ?c 1 at_kitchen_content_m make_sandwich_m ?c 1
 ?b 1 no_gluten_bread make_sandwich_no_gluten ?b 1  is ?c 1 no_gluten_content_m make_sandwich_no_gluten_m ?c 1
 ?p1 2 at move_tray ?t?p1 2                is ?p1 2 at_m move_tray_m ?t?p1 2
 ?p2 2 at move_tray ?t?p2 2                is ?p2 2 at_m move_tray_m ?t?p2 2
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'make_sandwich': 'make_sandwich_m', 'put_on_tray': 'put_on_tray_m', 'make_sandwich_no_gluten': 'make_sandwich_no_gluten_m', 'serve_sandwich_no_gluten': 'serve_sandwich_no_gluten_m', 'serve_sandwich': 'serve_sandwich_m', 'move_tray': 'move_tray_m'}
###########################
###########################
Predicates mapping
{'at_kitchen_sandwich': 'at_kitchen_sandwich_m', 'notexist': 'notexist_m', 'no_gluten_sandwich': 'no_gluten_sandwich_m', 'ontray': 'ontray_m', 'at_kitchen_content': 'at_kitchen_bread_m', 'not_allergic_gluten': 'not_allergic_gluten_m', 'no_gluten_content': 'no_gluten_bread_m', 'served': 'served_m', 'allergic_gluten': 'allergic_gluten_m', 'waiting': 'waiting_m', 'at': 'at_m', 'at_kitchen_tray': 'at_kitchen_tray_m', 'at_kitchen_bread': 'at_kitchen_content_m', 'no_gluten_bread': 'no_gluten_content_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  1.35
planning_task_time =  0.1
total_task_time =  1.45
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between child-snack-sequential-satisficing.pddl and child-snack-sequential-satisficing-M.pddl
************************************************************
Removing the macros from  child-snack-sequential-satisficing.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Removing the macros from  child-snack-sequential-satisficing-M.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is a macro make_sandwich_put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing-M.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?s 1 at_kitchen_sandwich make_sandwich ?s 1  is ?s 1 at_kitchen_sandwich make_sandwich ?s 1
 ?s 1 at_kitchen_sandwich put_on_tray ?s 1  is ?s 1 at_kitchen_sandwich put_on_tray ?s 1
 ?s 1 notexist make_sandwich_no_gluten ?s 1  is ?s 1 notexist make_sandwich_no_gluten ?s 1
 ?s 1 no_gluten_sandwich make_sandwich_no_gluten ?s 1  is ?s 1 no_gluten_sandwich make_sandwich_no_gluten ?s 1
 ?s 1 notexist make_sandwich ?s 1          is ?s 1 notexist make_sandwich ?s 1
 ?s 2 ontray serve_sandwich_no_gluten ?s?t 1  is ?s 2 ontray serve_sandwich_no_gluten ?s?t 1
 ?s 2 ontray serve_sandwich ?s?t 1         is ?s 2 ontray serve_sandwich ?s?t 1
 ?s 1 at_kitchen_sandwich make_sandwich_no_gluten ?s 1  is ?s 1 at_kitchen_sandwich make_sandwich_no_gluten ?s 1
 ?s 2 ontray put_on_tray ?s?t 1            is ?s 2 ontray put_on_tray ?s?t 1
 ?s 1 no_gluten_sandwich serve_sandwich_no_gluten ?s 1  is ?s 1 no_gluten_sandwich serve_sandwich_no_gluten ?s 1
 ?c 1 at_kitchen_content make_sandwich_no_gluten ?c 1  is ?c 1 at_kitchen_content make_sandwich_no_gluten ?c 1
 ?c 1 not_allergic_gluten serve_sandwich ?c 1  is ?c 1 not_allergic_gluten serve_sandwich ?c 1
 ?c 1 no_gluten_content make_sandwich_no_gluten ?c 1  is ?c 1 no_gluten_content make_sandwich_no_gluten ?c 1
 ?c 1 served serve_sandwich ?c 1           is ?c 1 served serve_sandwich ?c 1
 ?c 1 allergic_gluten serve_sandwich_no_gluten ?c 1  is ?c 1 allergic_gluten serve_sandwich_no_gluten ?c 1
 ?c 2 waiting serve_sandwich_no_gluten ?c?p 1  is ?c 2 waiting serve_sandwich_no_gluten ?c?p 1
 ?c 2 waiting serve_sandwich ?c?p 1        is ?c 2 waiting serve_sandwich ?c?p 1
 ?c 1 at_kitchen_content make_sandwich ?c 1  is ?c 1 at_kitchen_content make_sandwich ?c 1
 ?c 1 served serve_sandwich_no_gluten ?c 1  is ?c 1 served serve_sandwich_no_gluten ?c 1
 ?t 2 at serve_sandwich_no_gluten ?t?p 1   is ?t 2 at serve_sandwich_no_gluten ?t?p 1
 ?t 2 ontray serve_sandwich ?s?t 2         is ?t 2 ontray serve_sandwich ?s?t 2
 ?t 2 at serve_sandwich ?t?p 1             is ?t 2 at serve_sandwich ?t?p 1
 ?t 2 ontray serve_sandwich_no_gluten ?s?t 2  is ?t 2 ontray serve_sandwich_no_gluten ?s?t 2
 ?t 1 at_kitchen_tray put_on_tray ?t 1     is ?t 1 at_kitchen_tray put_on_tray ?t 1
 ?t 2 ontray put_on_tray ?s?t 2            is ?t 2 ontray put_on_tray ?s?t 2
 ?t 2 at move_tray ?t?p2 1                 is ?t 2 at move_tray ?t?p2 1
 ?t 2 at move_tray ?t?p1 1                 is ?t 2 at move_tray ?t?p1 1
 ?p 2 at serve_sandwich_no_gluten ?t?p 2   is ?p 2 at serve_sandwich_no_gluten ?t?p 2
 ?p 2 at serve_sandwich ?t?p 2             is ?p 2 at serve_sandwich ?t?p 2
 ?p 2 waiting serve_sandwich_no_gluten ?c?p 2  is ?p 2 waiting serve_sandwich_no_gluten ?c?p 2
 ?p 2 waiting serve_sandwich ?c?p 2        is ?p 2 waiting serve_sandwich ?c?p 2
 ?b 1 at_kitchen_bread make_sandwich_no_gluten ?b 1  is ?b 1 at_kitchen_bread make_sandwich_no_gluten ?b 1
 ?b 1 at_kitchen_bread make_sandwich ?b 1  is ?b 1 at_kitchen_bread make_sandwich ?b 1
 ?b 1 no_gluten_bread make_sandwich_no_gluten ?b 1  is ?b 1 no_gluten_bread make_sandwich_no_gluten ?b 1
 ?p1 2 at move_tray ?t?p1 2                is ?p1 2 at move_tray ?t?p1 2
 ?p2 2 at move_tray ?t?p2 2                is ?p2 2 at move_tray ?t?p2 2
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'make_sandwich': 'make_sandwich', 'put_on_tray': 'put_on_tray', 'make_sandwich_no_gluten': 'make_sandwich_no_gluten', 'serve_sandwich_no_gluten': 'serve_sandwich_no_gluten', 'serve_sandwich': 'serve_sandwich', 'move_tray': 'move_tray'}
###########################
###########################
Predicates mapping
{'at_kitchen_sandwich': 'at_kitchen_sandwich', 'notexist': 'notexist', 'no_gluten_sandwich': 'no_gluten_sandwich', 'ontray': 'ontray', 'at_kitchen_content': 'at_kitchen_content', 'not_allergic_gluten': 'not_allergic_gluten', 'no_gluten_content': 'no_gluten_content', 'served': 'served', 'allergic_gluten': 'allergic_gluten', 'waiting': 'waiting', 'at': 'at', 'at_kitchen_tray': 'at_kitchen_tray', 'at_kitchen_bread': 'at_kitchen_bread', 'no_gluten_bread': 'no_gluten_bread'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  1.37
planning_task_time =  0.1
total_task_time =  1.47
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between child-snack-sequential-satisficing.pddl and child-snack-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  child-snack-sequential-satisficing.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Removing the macros from  child-snack-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
The action is not a macro make_sandwich_no_gluten_m
The action is not a macro make_sandwich_m
The action is not a macro put_on_tray_m
The action is not a macro serve_sandwich_no_gluten_m
The action is not a macro serve_sandwich_m
The action is not a macro move_tray_m
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  0.5
planning_task_time =  0.08
total_task_time =  0.59
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between child-snack-sequential-satisficing.pddl and child-snack-sequential-satisficing_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  child-snack-sequential-satisficing.pddl
The action is not a macro make_sandwich_no_gluten
The action is not a macro make_sandwich
The action is not a macro put_on_tray
The action is not a macro serve_sandwich_no_gluten
The action is not a macro serve_sandwich
The action is not a macro move_tray
Removing the macros from  child-snack-sequential-satisficing_swapped_two_variables_in_atom.pddl
The action is not a macro make_sandwich_no_gluten_m
The action is not a macro make_sandwich_m
The action is not a macro put_on_tray_m
The action is not a macro serve_sandwich_no_gluten_m
The action is not a macro serve_sandwich_m
The action is not a macro move_tray_m
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain child-snack-sequential-satisficing_swapped_two_variables_in_atom.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  0.51
planning_task_time =  0.08
total_task_time =  0.59
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between elevator-strips-simple-typed-domain.pddl and elevator-strips-simple-typed-domain_delete_operator.pddl
************************************************************
Removing the macros from  elevator-strips-simple-typed-domain.pddl
The action is not a macro board
The action is not a macro depart
The action is not a macro up
The action is not a macro down
Removing the macros from  elevator-strips-simple-typed-domain_delete_operator.pddl
The action is not a macro depart_m
The action is not a macro up_m
The action is not a macro down_m
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain_delete_operator.pddl
Domain2 is potentially redundant
Domain1 and Domain2 (potentially redundant) might be functionally equivalent, if the D1 operators(s) that do not have PFEPOs from D2 are found to be grouped operators!
And then these operators are removed. Then restart the algorithm on the modified D1 domain and on D2.
Ig they are functionally equivalent, then a mapping will be found. Note D2 might still have grouped operators. However this is not a problem.
A conclusive verdict cannot be returned by our method currently. The end user need to check the if the operators without PFEPOs are grouped operators or not.
Then remove those found to be grouped operators and restart the process again.
{'board': [], 'depart': ['depart_m'], 'up': ['up_m', 'down_m'], 'down': ['up_m', 'down_m']}
At least one of D1 supposedly primitive operator does not have any PFEPO from D2!. If none of these operators are grouped, then the two domains must be not functionally equivalent. On the other hand, if some of these operators are grouped, then further check is needed to decide on the functional equivalence of the two domains. 
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.05
total_task_time =  0.05
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between elevator-strips-simple-typed-domain.pddl and elevator-strips-simple-typed-domain_invalid_macro.pddl
************************************************************
Removing the macros from  elevator-strips-simple-typed-domain.pddl
The action is not a macro board
The action is not a macro depart
The action is not a macro up
The action is not a macro down
Removing the macros from  elevator-strips-simple-typed-domain_invalid_macro.pddl
The action is not a macro board_m
The action is not a macro depart_m
The action is not a macro up_m
The action is not a macro down_m
The action is not a macro board-depart-up_m
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain_invalid_macro.pddl
Domain2 is potentially redundant
[[0, 4], [15, 18], [29, 32], [43, 46]]
[[0, 4], [15, 18], [29, 32], [43, 46], [57, 60], [71, 74], [85, 86]]
first and second ranges are not the same 
[[0, 5], [12, 15], [22, 23], [30, 31], [38, 39], [46, 46]]
[[0, 7], [16, 21], [30, 33], [42, 45], [54, 56], [65, 66]]
first and second ranges XX are not the same 
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?p 2 destin depart ?p?f 1                 is ?p 2 destin_m depart_m ?p?f 1
 ?p 1 served depart ?p 1                   is ?p 1 served_m depart_m ?p 1
 ?p 1 boarded depart ?p 1                  is ?p 1 boarded_m depart_m ?p 1
 ?p 1 boarded board ?p 1                   is ?p 1 boarded_m board_m ?p 1
 ?p 2 origin board ?p?f 1                  is ?p 2 origin_m board_m ?p?f 1
 ?f 1 lift-at depart ?f 1                  is ?f 1 lift-at_m depart_m ?f 1
 ?f 2 origin board ?p?f 2                  is ?f 2 origin_m board_m ?p?f 2
 ?f 1 lift-at board ?f 1                   is ?f 1 lift-at_m board_m ?f 1
 ?f 2 destin depart ?p?f 2                 is ?f 2 destin_m depart_m ?p?f 2
 ?f1 1 lift-at up ?f1 1                    is ?f1 1 lift-at_m up_m ?f1 1
 ?f1 1 lift-at down ?f1 1                  is ?f1 1 lift-at_m down_m ?f1 1
 ?f1 2 above up ?f1?f2 1                   is ?f1 2 above_m up_m ?f1?f2 1
 ?f1 2 above down ?f2?f1 2                 is ?f1 2 above_m down_m ?f2?f1 2
 ?f2 1 lift-at up ?f2 1                    is ?f2 1 lift-at_m up_m ?f2 1
 ?f2 2 above up ?f1?f2 2                   is ?f2 2 above_m up_m ?f1?f2 2
 ?f2 2 above down ?f2?f1 1                 is ?f2 2 above_m down_m ?f2?f1 1
 ?f2 1 lift-at down ?f2 1                  is ?f2 1 lift-at_m down_m ?f2 1
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  0.34
planning_task_time =  0.07
total_task_time =  0.4
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between elevator-strips-simple-typed-domain.pddl and elevator-strips-simple-typed-domain_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  elevator-strips-simple-typed-domain.pddl
The action is not a macro board
The action is not a macro depart
The action is not a macro up
The action is not a macro down
Removing the macros from  elevator-strips-simple-typed-domain_swapped_two_variables_in_atom.pddl
The action is not a macro board_m
The action is not a macro depart_m
The action is not a macro up_m
The action is not a macro down_m
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain_swapped_two_variables_in_atom.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  0.16
planning_task_time =  0.05
total_task_time =  0.22
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between elevator-strips-simple-typed-domain.pddl and elevator-strips-simple-typed-domain_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  elevator-strips-simple-typed-domain.pddl
The action is not a macro board
The action is not a macro depart
The action is not a macro up
The action is not a macro down
Removing the macros from  elevator-strips-simple-typed-domain_swapped_two_atoms_between_two_parts.pddl
The action is not a macro board_m
The action is not a macro depart_m
The action is not a macro up_m
The action is not a macro down_m
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain_swapped_two_atoms_between_two_parts.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  0.16
planning_task_time =  0.05
total_task_time =  0.21
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between elevator-strips-simple-typed-domain.pddl and elevator-strips-simple-typed-domain_valid_macro.pddl
************************************************************
Removing the macros from  elevator-strips-simple-typed-domain.pddl
The action is not a macro board
The action is not a macro depart
The action is not a macro up
The action is not a macro down
Removing the macros from  elevator-strips-simple-typed-domain_valid_macro.pddl
The action is not a macro board_m
The action is not a macro depart_m
The action is not a macro up_m
The action is not a macro down_m
The action is a macro board-depart-up_m
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain_valid_macro.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?p 2 destin depart ?p?f 1                 is ?p 2 destin_m depart_m ?p?f 1
 ?p 1 served depart ?p 1                   is ?p 1 served_m depart_m ?p 1
 ?p 1 boarded depart ?p 1                  is ?p 1 boarded_m depart_m ?p 1
 ?p 1 boarded board ?p 1                   is ?p 1 boarded_m board_m ?p 1
 ?p 2 origin board ?p?f 1                  is ?p 2 origin_m board_m ?p?f 1
 ?f 1 lift-at depart ?f 1                  is ?f 1 lift-at_m depart_m ?f 1
 ?f 2 origin board ?p?f 2                  is ?f 2 origin_m board_m ?p?f 2
 ?f 1 lift-at board ?f 1                   is ?f 1 lift-at_m board_m ?f 1
 ?f 2 destin depart ?p?f 2                 is ?f 2 destin_m depart_m ?p?f 2
 ?f1 1 lift-at up ?f1 1                    is ?f1 1 lift-at_m up_m ?f1 1
 ?f1 1 lift-at down ?f1 1                  is ?f1 1 lift-at_m down_m ?f1 1
 ?f1 2 above up ?f1?f2 1                   is ?f1 2 above_m up_m ?f1?f2 1
 ?f1 2 above down ?f2?f1 2                 is ?f1 2 above_m down_m ?f2?f1 2
 ?f2 1 lift-at up ?f2 1                    is ?f2 1 lift-at_m up_m ?f2 1
 ?f2 2 above up ?f1?f2 2                   is ?f2 2 above_m up_m ?f1?f2 2
 ?f2 2 above down ?f2?f1 1                 is ?f2 2 above_m down_m ?f2?f1 1
 ?f2 1 lift-at down ?f2 1                  is ?f2 1 lift-at_m down_m ?f2 1
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'depart': 'depart_m', 'board': 'board_m', 'up': 'up_m', 'down': 'down_m'}
###########################
###########################
Predicates mapping
{'destin': 'destin_m', 'served': 'served_m', 'boarded': 'boarded_m', 'origin': 'origin_m', 'lift-at': 'lift-at_m', 'above': 'above_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  0.23
planning_task_time =  0.06
total_task_time =  0.29
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between elevator-strips-simple-typed-domain.pddl and elevator-strips-simple-typed-domain-M.pddl
************************************************************
:constants is not recognized in domain
Removing the macros from  elevator-strips-simple-typed-domain.pddl
The action is not a macro board
The action is not a macro depart
The action is not a macro up
The action is not a macro down
Removing the macros from  elevator-strips-simple-typed-domain-M.pddl
The action is not a macro board_m
The action is not a macro depart_m
The action is not a macro up_m
The action is not a macro down_m
The action is a macro board-up-depart_m
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain elevator-strips-simple-typed-domain-M.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?p 2 destin depart ?p?f 1                 is ?p 2 destin_m depart_m ?p?f 1
 ?p 1 served depart ?p 1                   is ?p 1 served_m depart_m ?p 1
 ?p 1 boarded depart ?p 1                  is ?p 1 boarded_m depart_m ?p 1
 ?p 1 boarded board ?p 1                   is ?p 1 boarded_m board_m ?p 1
 ?p 2 origin board ?p?f 1                  is ?p 2 origin_m board_m ?p?f 1
 ?f 1 lift-at depart ?f 1                  is ?f 1 lift-at_m depart_m ?f 1
 ?f 2 origin board ?p?f 2                  is ?f 2 origin_m board_m ?p?f 2
 ?f 1 lift-at board ?f 1                   is ?f 1 lift-at_m board_m ?f 1
 ?f 2 destin depart ?p?f 2                 is ?f 2 destin_m depart_m ?p?f 2
 ?f1 1 lift-at up ?f1 1                    is ?f1 1 lift-at_m up_m ?f1 1
 ?f1 1 lift-at down ?f1 1                  is ?f1 1 lift-at_m down_m ?f1 1
 ?f1 2 above up ?f1?f2 1                   is ?f1 2 above_m up_m ?f1?f2 1
 ?f1 2 above down ?f2?f1 2                 is ?f1 2 above_m down_m ?f2?f1 2
 ?f2 1 lift-at up ?f2 1                    is ?f2 1 lift-at_m up_m ?f2 1
 ?f2 2 above up ?f1?f2 2                   is ?f2 2 above_m up_m ?f1?f2 2
 ?f2 2 above down ?f2?f1 1                 is ?f2 2 above_m down_m ?f2?f1 1
 ?f2 1 lift-at down ?f2 1                  is ?f2 1 lift-at_m down_m ?f2 1
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'depart': 'depart_m', 'board': 'board_m', 'up': 'up_m', 'down': 'down_m'}
###########################
###########################
Predicates mapping
{'destin': 'destin_m', 'served': 'served_m', 'boarded': 'boarded_m', 'origin': 'origin_m', 'lift-at': 'lift-at_m', 'above': 'above_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  0.24
planning_task_time =  0.06
total_task_time =  0.3
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between floor-tile-sequential-satisficing.pddl and floor-tile-sequential-satisficing_delete_operator.pddl
************************************************************
Removing the macros from  floor-tile-sequential-satisficing.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is not a macro left
Removing the macros from  floor-tile-sequential-satisficing_delete_operator.pddl
The action is not a macro change-color_m
The action is not a macro paint-down_m
The action is not a macro up_m
The action is not a macro down_m
The action is not a macro right_m
The action is not a macro left_m
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing_delete_operator.pddl
Domain2 is potentially redundant
[[0, 17], [41, 56], [80, 93], [117, 121], [145, 146]]
[[0, 14], [35, 48], [69, 80], [101, 103], [124, 125]]
first and second ranges are not the same 
[[0, 19], [40, 49], [70, 77], [98, 101], [122, 125], [146, 149], [170, 171], [192, 193], [214, 214]]
[[0, 17], [36, 44], [63, 68], [87, 90], [109, 110], [129, 130], [149, 150], [169, 170], [189, 189]]
first and second ranges XX are not the same 
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  0.94
planning_task_time =  0.09
total_task_time =  1.03
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between floor-tile-sequential-satisficing.pddl and floor-tile-sequential-satisficing_valid_macro.pddl
************************************************************
Removing the macros from  floor-tile-sequential-satisficing.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is not a macro left
Removing the macros from  floor-tile-sequential-satisficing_valid_macro.pddl
The action is not a macro change-color_m
The action is not a macro paint-up_m
The action is not a macro paint-down_m
The action is not a macro up_m
The action is not a macro down_m
The action is not a macro right_m
The action is not a macro left_m
The action is a macro change-color-paint-up-paint-down_m
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing_valid_macro.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?y 2 painted paint-down ?y?c 1            is ?y 2 painted_m paint-down_m ?y?c 1
 ?y 2 robot-at up ?r?y 2                   is ?y 2 robot-at_m up_m ?r?y 2
 ?y 2 left left ?y?x 1                     is ?y 2 left_m left_m ?y?x 1
 ?y 2 down down ?y?x 1                     is ?y 2 down_m down_m ?y?x 1
 ?y 2 robot-at right ?r?y 2                is ?y 2 robot-at_m right_m ?r?y 2
 ?y 2 down paint-down ?y?x 1               is ?y 2 down_m paint-down_m ?y?x 1
 ?y 1 clear left ?y 1                      is ?y 1 clear_m left_m ?y 1
 ?y 1 clear paint-up ?y 1                  is ?y 1 clear_m paint-up_m ?y 1
 ?y 2 right right ?y?x 1                   is ?y 2 right_m right_m ?y?x 1
 ?y 2 robot-at left ?r?y 2                 is ?y 2 robot-at_m left_m ?r?y 2
 ?y 2 painted paint-up ?y?c 1              is ?y 2 painted_m paint-up_m ?y?c 1
 ?y 1 clear paint-down ?y 1                is ?y 1 clear_m paint-down_m ?y 1
 ?y 1 clear right ?y 1                     is ?y 1 clear_m right_m ?y 1
 ?y 1 clear up ?y 1                        is ?y 1 clear_m up_m ?y 1
 ?y 1 clear down ?y 1                      is ?y 1 clear_m down_m ?y 1
 ?y 2 up paint-up ?y?x 1                   is ?y 2 up_m paint-up_m ?y?x 1
 ?y 2 robot-at down ?r?y 2                 is ?y 2 robot-at_m down_m ?r?y 2
 ?y 2 up up ?y?x 1                         is ?y 2 up_m up_m ?y?x 1
 ?x 1 clear right ?x 1                     is ?x 1 clear_m right_m ?x 1
 ?x 1 clear down ?x 1                      is ?x 1 clear_m down_m ?x 1
 ?x 2 up paint-up ?y?x 2                   is ?x 2 up_m paint-up_m ?y?x 2
 ?x 2 robot-at paint-down ?r?x 2           is ?x 2 robot-at_m paint-down_m ?r?x 2
 ?x 2 robot-at paint-up ?r?x 2             is ?x 2 robot-at_m paint-up_m ?r?x 2
 ?x 1 clear left ?x 1                      is ?x 1 clear_m left_m ?x 1
 ?x 1 clear up ?x 1                        is ?x 1 clear_m up_m ?x 1
 ?x 2 robot-at left ?r?x 2                 is ?x 2 robot-at_m left_m ?r?x 2
 ?x 2 robot-at up ?r?x 2                   is ?x 2 robot-at_m up_m ?r?x 2
 ?x 2 right right ?y?x 2                   is ?x 2 right_m right_m ?y?x 2
 ?x 2 left left ?y?x 2                     is ?x 2 left_m left_m ?y?x 2
 ?x 2 down paint-down ?y?x 2               is ?x 2 down_m paint-down_m ?y?x 2
 ?x 2 down down ?y?x 2                     is ?x 2 down_m down_m ?y?x 2
 ?x 2 up up ?y?x 2                         is ?x 2 up_m up_m ?y?x 2
 ?x 2 robot-at down ?r?x 2                 is ?x 2 robot-at_m down_m ?r?x 2
 ?x 2 robot-at right ?r?x 2                is ?x 2 robot-at_m right_m ?r?x 2
 ?r 2 robot-has paint-down ?r?c 1          is ?r 2 robot-has_m paint-down_m ?r?c 1
 ?r 2 robot-at down ?r?x 1                 is ?r 2 robot-at_m down_m ?r?x 1
 ?r 2 robot-at right ?r?x 1                is ?r 2 robot-at_m right_m ?r?x 1
 ?r 2 robot-has change-color ?r?c2 1       is ?r 2 robot-has_m change-color_m ?r?c2 1
 ?r 2 robot-at left ?r?x 1                 is ?r 2 robot-at_m left_m ?r?x 1
 ?r 2 robot-at up ?r?x 1                   is ?r 2 robot-at_m up_m ?r?x 1
 ?r 2 robot-at right ?r?y 1                is ?r 2 robot-at_m right_m ?r?y 1
 ?r 2 robot-has paint-up ?r?c 1            is ?r 2 robot-has_m paint-up_m ?r?c 1
 ?r 2 robot-at paint-up ?r?x 1             is ?r 2 robot-at_m paint-up_m ?r?x 1
 ?r 2 robot-at paint-down ?r?x 1           is ?r 2 robot-at_m paint-down_m ?r?x 1
 ?r 2 robot-at down ?r?y 1                 is ?r 2 robot-at_m down_m ?r?y 1
 ?r 2 robot-at left ?r?y 1                 is ?r 2 robot-at_m left_m ?r?y 1
 ?r 2 robot-at up ?r?y 1                   is ?r 2 robot-at_m up_m ?r?y 1
 ?r 2 robot-has change-color ?r?c 1        is ?r 2 robot-has_m change-color_m ?r?c 1
 ?c 2 robot-has change-color ?r?c 2        is ?c 2 robot-has_m change-color_m ?r?c 2
 ?c 2 robot-has paint-up ?r?c 2            is ?c 2 robot-has_m paint-up_m ?r?c 2
 ?c 2 robot-has paint-down ?r?c 2          is ?c 2 robot-has_m paint-down_m ?r?c 2
 ?c 2 painted paint-down ?y?c 2            is ?c 2 painted_m paint-down_m ?y?c 2
 ?c 2 painted paint-up ?y?c 2              is ?c 2 painted_m paint-up_m ?y?c 2
 ?c2 1 available-color change-color ?c2 1  is ?c2 1 available-color_m change-color_m ?c2 1
 ?c2 2 robot-has change-color ?r?c2 2      is ?c2 2 robot-has_m change-color_m ?r?c2 2
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'paint-down': 'paint-down_m', 'up': 'up_m', 'left': 'left_m', 'down': 'down_m', 'right': 'right_m', 'paint-up': 'paint-up_m', 'change-color': 'change-color_m'}
###########################
###########################
Predicates mapping
{'painted': 'painted_m', 'robot-at': 'robot-at_m', 'left': 'left_m', 'down': 'down_m', 'clear': 'clear_m', 'right': 'right_m', 'up': 'up_m', 'robot-has': 'robot-has_m', 'available-color': 'available-color_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  9.22
planning_task_time =  0.11
total_task_time =  9.34
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between floor-tile-sequential-satisficing.pddl and floor-tile-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  floor-tile-sequential-satisficing.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is not a macro left
Removing the macros from  floor-tile-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
The action is not a macro change-color_m
The action is not a macro paint-up_m
The action is not a macro paint-down_m
The action is not a macro up_m
The action is not a macro down_m
The action is not a macro right_m
The action is not a macro left_m
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  10.43
planning_task_time =  0.1
total_task_time =  10.53
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between floor-tile-sequential-satisficing.pddl and floor-tile-sequential-satisficing_invalid_macro.pddl
************************************************************
Removing the macros from  floor-tile-sequential-satisficing.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is not a macro left
Removing the macros from  floor-tile-sequential-satisficing_invalid_macro.pddl
The action is not a macro change-color_m
The action is not a macro paint-up_m
The action is not a macro paint-down_m
The action is not a macro up_m
The action is not a macro down_m
The action is not a macro right_m
The action is not a macro left_m
The action is a macro change-color-paint-up-paint-down_m
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing_invalid_macro.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?y 2 painted paint-down ?y?c 1            is ?y 2 painted_m paint-up_m ?y?c 1
 ?y 2 robot-at up ?r?y 2                   is ?y 2 robot-at_m down_m ?r?y 2
 ?y 2 left left ?y?x 1                     is ?y 2 right_m right_m ?y?x 1
 ?y 2 down down ?y?x 1                     is ?y 2 up_m up_m ?y?x 1
 ?y 2 robot-at right ?r?y 2                is ?y 2 robot-at_m left_m ?r?y 2
 ?y 2 down paint-down ?y?x 1               is ?y 2 up_m paint-up_m ?y?x 1
 ?y 1 clear left ?y 1                      is ?y 1 clear_m right_m ?y 1
 ?y 1 clear paint-up ?y 1                  is ?y 1 clear_m paint-down_m ?y 1
 ?y 2 right right ?y?x 1                   is ?y 2 left_m left_m ?y?x 1
 ?y 2 robot-at left ?r?y 2                 is ?y 2 robot-at_m right_m ?r?y 2
 ?y 2 painted paint-up ?y?c 1              is ?y 2 painted_m paint-down_m ?y?c 1
 ?y 1 clear paint-down ?y 1                is ?y 1 clear_m paint-up_m ?y 1
 ?y 1 clear right ?y 1                     is ?y 1 clear_m left_m ?y 1
 ?y 1 clear up ?y 1                        is ?y 1 clear_m down_m ?y 1
 ?y 1 clear down ?y 1                      is ?y 1 clear_m up_m ?y 1
 ?y 2 up paint-up ?y?x 1                   is ?y 2 down_m paint-down_m ?y?x 1
 ?y 2 robot-at down ?r?y 2                 is ?y 2 robot-at_m up_m ?r?y 2
 ?y 2 up up ?y?x 1                         is ?y 2 down_m down_m ?y?x 1
 ?x 1 clear right ?x 1                     is ?x 1 clear_m left_m ?x 1
 ?x 1 clear down ?x 1                      is ?x 1 clear_m up_m ?x 1
 ?x 2 up paint-up ?y?x 2                   is ?x 2 down_m paint-down_m ?y?x 2
 ?x 2 robot-at paint-down ?r?x 2           is ?x 2 robot-at_m paint-up_m ?r?x 2
 ?x 2 robot-at paint-up ?r?x 2             is ?x 2 robot-at_m paint-down_m ?r?x 2
 ?x 1 clear left ?x 1                      is ?x 1 clear_m right_m ?x 1
 ?x 1 clear up ?x 1                        is ?x 1 clear_m down_m ?x 1
 ?x 2 robot-at left ?r?x 2                 is ?x 2 robot-at_m right_m ?r?x 2
 ?x 2 robot-at up ?r?x 2                   is ?x 2 robot-at_m down_m ?r?x 2
 ?x 2 right right ?y?x 2                   is ?x 2 left_m left_m ?y?x 2
 ?x 2 left left ?y?x 2                     is ?x 2 right_m right_m ?y?x 2
 ?x 2 down paint-down ?y?x 2               is ?x 2 up_m paint-up_m ?y?x 2
 ?x 2 down down ?y?x 2                     is ?x 2 up_m up_m ?y?x 2
 ?x 2 up up ?y?x 2                         is ?x 2 down_m down_m ?y?x 2
 ?x 2 robot-at down ?r?x 2                 is ?x 2 robot-at_m up_m ?r?x 2
 ?x 2 robot-at right ?r?x 2                is ?x 2 robot-at_m left_m ?r?x 2
 ?r 2 robot-has paint-down ?r?c 1          is ?r 2 robot-has_m paint-up_m ?r?c 1
 ?r 2 robot-at down ?r?x 1                 is ?r 2 robot-at_m up_m ?r?x 1
 ?r 2 robot-at right ?r?x 1                is ?r 2 robot-at_m left_m ?r?x 1
 ?r 2 robot-has change-color ?r?c2 1       is ?r 2 robot-has_m change-color_m ?r?c2 1
 ?r 2 robot-at left ?r?x 1                 is ?r 2 robot-at_m right_m ?r?x 1
 ?r 2 robot-at up ?r?x 1                   is ?r 2 robot-at_m down_m ?r?x 1
 ?r 2 robot-at right ?r?y 1                is ?r 2 robot-at_m left_m ?r?y 1
 ?r 2 robot-has paint-up ?r?c 1            is ?r 2 robot-has_m paint-down_m ?r?c 1
 ?r 2 robot-at paint-up ?r?x 1             is ?r 2 robot-at_m paint-down_m ?r?x 1
 ?r 2 robot-at paint-down ?r?x 1           is ?r 2 robot-at_m paint-up_m ?r?x 1
 ?r 2 robot-at down ?r?y 1                 is ?r 2 robot-at_m up_m ?r?y 1
 ?r 2 robot-at left ?r?y 1                 is ?r 2 robot-at_m right_m ?r?y 1
 ?r 2 robot-at up ?r?y 1                   is ?r 2 robot-at_m down_m ?r?y 1
 ?r 2 robot-has change-color ?r?c 1        is ?r 2 robot-has_m change-color_m ?r?c 1
 ?c 2 robot-has change-color ?r?c 2        is ?c 2 robot-has_m change-color_m ?r?c 2
 ?c 2 robot-has paint-up ?r?c 2            is ?c 2 robot-has_m paint-down_m ?r?c 2
 ?c 2 robot-has paint-down ?r?c 2          is ?c 2 robot-has_m paint-up_m ?r?c 2
 ?c 2 painted paint-down ?y?c 2            is ?c 2 painted_m paint-up_m ?y?c 2
 ?c 2 painted paint-up ?y?c 2              is ?c 2 painted_m paint-down_m ?y?c 2
 ?c2 1 available-color change-color ?c2 1  is ?c2 1 available-color_m change-color_m ?c2 1
 ?c2 2 robot-has change-color ?r?c2 2      is ?c2 2 robot-has_m change-color_m ?r?c2 2
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'paint-down': 'paint-up_m', 'up': 'down_m', 'left': 'right_m', 'down': 'up_m', 'right': 'left_m', 'paint-up': 'paint-down_m', 'change-color': 'change-color_m'}
###########################
###########################
Predicates mapping
{'painted': 'painted_m', 'robot-at': 'robot-at_m', 'left': 'right_m', 'down': 'up_m', 'clear': 'clear_m', 'right': 'left_m', 'up': 'down_m', 'robot-has': 'robot-has_m', 'available-color': 'available-color_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  10.56
planning_task_time =  0.11
total_task_time =  10.67
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between floor-tile-sequential-satisficing.pddl and floor-tile-sequential-satisficing_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  floor-tile-sequential-satisficing.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is not a macro left
Removing the macros from  floor-tile-sequential-satisficing_swapped_two_variables_in_atom.pddl
The action is not a macro change-color_m
The action is not a macro paint-up_m
The action is not a macro paint-down_m
The action is not a macro up_m
The action is not a macro down_m
The action is not a macro right_m
The action is not a macro left_m
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing_swapped_two_variables_in_atom.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
 This might be because either the two domains are truly not functionally equivalent, i.e mapping is not possible between the primitive operators of the two domains!
or the two domains are actually functionally equivalent, and there is mapping between the primitive operators of the two domains, but there is no mapping between the grouped operators.
Note the none existence of mapping between the grouped operators do not impact the functional equivalence between the two domains.
This method can be developed to automatically find and exclude grouped operators, then we can give a conclusive verdict.
Until then, I am afraid you (the end user) have to do this on your own.
Do not worry, I will give a bit of help here.
Here are the set of operators that could possibly be grouped operators. To check them properly, read our paper.
This list is useful because you can rest assured that no operator other than the ones in this list can be grouped operator. More details in our paper.
Sorry we could not help you further and best of luck!
No conclusive verdict on the functional equivalence of Domain1 and Domain2. Mapping could not be found between the sets of primitive and grouped operators of the two domains.
Both domains are potentially redundant.
SMT_task_time =  10.86
planning_task_time =  0.09
total_task_time =  10.96
No conclusive verdict can be issued about the functional equivalence of Domain1 and Domain2!
************************************************************
************************************************************
Validating the functional equivalence between floor-tile-sequential-satisficing.pddl and floor-tile-sequential-satisficing-M.pddl
************************************************************
Removing the macros from  floor-tile-sequential-satisficing.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is not a macro left
Removing the macros from  floor-tile-sequential-satisficing-M.pddl
The action is not a macro change-color
The action is not a macro paint-up
The action is not a macro paint-down
The action is not a macro up
The action is not a macro down
The action is not a macro right
The action is a macro up_right
The action is not a macro left
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing.pddl
Domain1 is potentially redundant
Checking if the domain specified in this file is potentially redundant domain floor-tile-sequential-satisficing-M.pddl
Domain2 is potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?y 2 painted paint-down ?y?c 1            is ?y 2 painted paint-up ?y?c 1
 ?y 2 robot-at up ?r?y 2                   is ?y 2 robot-at down ?r?y 2
 ?y 2 left left ?y?x 1                     is ?y 2 right right ?y?x 1
 ?y 2 down down ?y?x 1                     is ?y 2 up up ?y?x 1
 ?y 2 robot-at right ?r?y 2                is ?y 2 robot-at left ?r?y 2
 ?y 2 down paint-down ?y?x 1               is ?y 2 up paint-up ?y?x 1
 ?y 1 clear left ?y 1                      is ?y 1 clear right ?y 1
 ?y 1 clear paint-up ?y 1                  is ?y 1 clear paint-down ?y 1
 ?y 2 right right ?y?x 1                   is ?y 2 left left ?y?x 1
 ?y 2 robot-at left ?r?y 2                 is ?y 2 robot-at right ?r?y 2
 ?y 2 painted paint-up ?y?c 1              is ?y 2 painted paint-down ?y?c 1
 ?y 1 clear paint-down ?y 1                is ?y 1 clear paint-up ?y 1
 ?y 1 clear right ?y 1                     is ?y 1 clear left ?y 1
 ?y 1 clear up ?y 1                        is ?y 1 clear down ?y 1
 ?y 1 clear down ?y 1                      is ?y 1 clear up ?y 1
 ?y 2 up paint-up ?y?x 1                   is ?y 2 down paint-down ?y?x 1
 ?y 2 robot-at down ?r?y 2                 is ?y 2 robot-at up ?r?y 2
 ?y 2 up up ?y?x 1                         is ?y 2 down down ?y?x 1
 ?x 1 clear right ?x 1                     is ?x 1 clear left ?x 1
 ?x 1 clear down ?x 1                      is ?x 1 clear up ?x 1
 ?x 2 up paint-up ?y?x 2                   is ?x 2 down paint-down ?y?x 2
 ?x 2 robot-at paint-down ?r?x 2           is ?x 2 robot-at paint-up ?r?x 2
 ?x 2 robot-at paint-up ?r?x 2             is ?x 2 robot-at paint-down ?r?x 2
 ?x 1 clear left ?x 1                      is ?x 1 clear right ?x 1
 ?x 1 clear up ?x 1                        is ?x 1 clear down ?x 1
 ?x 2 robot-at left ?r?x 2                 is ?x 2 robot-at right ?r?x 2
 ?x 2 robot-at up ?r?x 2                   is ?x 2 robot-at down ?r?x 2
 ?x 2 right right ?y?x 2                   is ?x 2 left left ?y?x 2
 ?x 2 left left ?y?x 2                     is ?x 2 right right ?y?x 2
 ?x 2 down paint-down ?y?x 2               is ?x 2 up paint-up ?y?x 2
 ?x 2 down down ?y?x 2                     is ?x 2 up up ?y?x 2
 ?x 2 up up ?y?x 2                         is ?x 2 down down ?y?x 2
 ?x 2 robot-at down ?r?x 2                 is ?x 2 robot-at up ?r?x 2
 ?x 2 robot-at right ?r?x 2                is ?x 2 robot-at left ?r?x 2
 ?r 2 robot-has paint-down ?r?c 1          is ?r 2 robot-has paint-up ?r?c 1
 ?r 2 robot-at down ?r?x 1                 is ?r 2 robot-at up ?r?x 1
 ?r 2 robot-at right ?r?x 1                is ?r 2 robot-at left ?r?x 1
 ?r 2 robot-has change-color ?r?c2 1       is ?r 2 robot-has change-color ?r?c2 1
 ?r 2 robot-at left ?r?x 1                 is ?r 2 robot-at right ?r?x 1
 ?r 2 robot-at up ?r?x 1                   is ?r 2 robot-at down ?r?x 1
 ?r 2 robot-at right ?r?y 1                is ?r 2 robot-at left ?r?y 1
 ?r 2 robot-has paint-up ?r?c 1            is ?r 2 robot-has paint-down ?r?c 1
 ?r 2 robot-at paint-up ?r?x 1             is ?r 2 robot-at paint-down ?r?x 1
 ?r 2 robot-at paint-down ?r?x 1           is ?r 2 robot-at paint-up ?r?x 1
 ?r 2 robot-at down ?r?y 1                 is ?r 2 robot-at up ?r?y 1
 ?r 2 robot-at left ?r?y 1                 is ?r 2 robot-at right ?r?y 1
 ?r 2 robot-at up ?r?y 1                   is ?r 2 robot-at down ?r?y 1
 ?r 2 robot-has change-color ?r?c 1        is ?r 2 robot-has change-color ?r?c 1
 ?c 2 robot-has change-color ?r?c 2        is ?c 2 robot-has change-color ?r?c 2
 ?c 2 robot-has paint-up ?r?c 2            is ?c 2 robot-has paint-down ?r?c 2
 ?c 2 robot-has paint-down ?r?c 2          is ?c 2 robot-has paint-up ?r?c 2
 ?c 2 painted paint-down ?y?c 2            is ?c 2 painted paint-up ?y?c 2
 ?c 2 painted paint-up ?y?c 2              is ?c 2 painted paint-down ?y?c 2
 ?c2 1 available-color change-color ?c2 1  is ?c2 1 available-color change-color ?c2 1
 ?c2 2 robot-has change-color ?r?c2 2      is ?c2 2 robot-has change-color ?r?c2 2
Domian1 and Domain2 are functionally equivlanent!
1
###########################
Primitive operators mapping
{'paint-down': 'paint-up', 'up': 'down', 'left': 'right', 'down': 'up', 'right': 'left', 'paint-up': 'paint-down', 'change-color': 'change-color'}
###########################
###########################
Predicates mapping
{'painted': 'painted', 'robot-at': 'robot-at', 'left': 'right', 'down': 'up', 'clear': 'clear', 'right': 'left', 'up': 'down', 'robot-has': 'robot-has', 'available-color': 'available-color'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are potentially redundant.
SMT_task_time =  11.29
planning_task_time =  0.11
total_task_time =  11.4
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between freecell-strips-typed-domain.pddl and freecell-strips-typed-domain_valid_macro.pddl
************************************************************
Removing the macros from  freecell-strips-typed-domain.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Removing the macros from  freecell-strips-typed-domain_valid_macro.pddl
The action is not a macro move_m
The action is not a macro move-b_m
The action is not a macro sendtofree_m
The action is not a macro sendtofree-b_m
The action is not a macro sendtonewcol_m
The action is not a macro sendtohome_m
The action is not a macro sendtohome-b_m
The action is not a macro homefromfreecell_m
The action is not a macro colfromfreecell_m
The action is not a macro newcolfromfreecell_m
The action is a macro move-move-b-sendtofree_m
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?card 1 incell colfromfreecell ?card 1    is ?card 1 incell_m colfromfreecell_m ?card 1
 ?card 2 suit sendtohome ?card?suit 1      is ?card 2 suit_m sendtohome_m ?card?suit 1
 ?card 1 incell newcolfromfreecell ?card 1  is ?card 1 incell_m newcolfromfreecell_m ?card 1
 ?card 2 on move-b ?card?newcard 1         is ?card 2 on_m move-b_m ?card?newcard 1
 ?card 1 clear sendtofree-b ?card 1        is ?card 1 clear_m sendtofree-b_m ?card 1
 ?card 2 suit homefromfreecell ?card?suit 1  is ?card 2 suit_m homefromfreecell_m ?card?suit 1
 ?card 1 home homefromfreecell ?card 1     is ?card 1 home_m homefromfreecell_m ?card 1
 ?card 2 value sendtohome-b ?card?vcard 1  is ?card 2 value_m sendtohome-b_m ?card?vcard 1
 ?card 1 clear sendtonewcol ?card 1        is ?card 1 clear_m sendtonewcol_m ?card 1
 ?card 2 value sendtohome ?card?vcard 1    is ?card 2 value_m sendtohome_m ?card?vcard 1
 ?card 1 clear move ?card 1                is ?card 1 clear_m move_m ?card 1
 ?card 1 incell homefromfreecell ?card 1   is ?card 1 incell_m homefromfreecell_m ?card 1
 ?card 2 on sendtohome ?card?oldcard 1     is ?card 2 on_m sendtohome_m ?card?oldcard 1
 ?card 1 clear sendtohome-b ?card 1        is ?card 1 clear_m sendtohome-b_m ?card 1
 ?card 1 clear sendtohome ?card 1          is ?card 1 clear_m sendtohome_m ?card 1
 ?card 1 bottomcol sendtofree-b ?card 1    is ?card 1 bottomcol_m sendtofree-b_m ?card 1
 ?card 2 on move ?card?oldcard 1           is ?card 2 on_m move_m ?card?oldcard 1
 ?card 2 on colfromfreecell ?card?newcard 1  is ?card 2 on_m colfromfreecell_m ?card?newcard 1
 ?card 2 canstack move-b ?card?newcard 1   is ?card 2 canstack_m move-b_m ?card?newcard 1
 ?card 2 on move ?card?newcard 1           is ?card 2 on_m move_m ?card?newcard 1
 ?card 2 canstack move ?card?newcard 1     is ?card 2 canstack_m move_m ?card?newcard 1
 ?card 1 incell sendtofree-b ?card 1       is ?card 1 incell_m sendtofree-b_m ?card 1
 ?card 1 incell sendtofree ?card 1         is ?card 1 incell_m sendtofree_m ?card 1
 ?card 2 suit sendtohome-b ?card?suit 1    is ?card 2 suit_m sendtohome-b_m ?card?suit 1
 ?card 1 bottomcol sendtonewcol ?card 1    is ?card 1 bottomcol_m sendtonewcol_m ?card 1
 ?card 1 clear move-b ?card 1              is ?card 1 clear_m move-b_m ?card 1
 ?card 2 canstack colfromfreecell ?card?newcard 1  is ?card 2 canstack_m colfromfreecell_m ?card?newcard 1
 ?card 1 home sendtohome-b ?card 1         is ?card 1 home_m sendtohome-b_m ?card 1
 ?card 1 bottomcol move-b ?card 1          is ?card 1 bottomcol_m move-b_m ?card 1
 ?card 1 clear newcolfromfreecell ?card 1  is ?card 1 clear_m newcolfromfreecell_m ?card 1
 ?card 1 clear colfromfreecell ?card 1     is ?card 1 clear_m colfromfreecell_m ?card 1
 ?card 1 clear sendtofree ?card 1          is ?card 1 clear_m sendtofree_m ?card 1
 ?card 1 bottomcol newcolfromfreecell ?card 1  is ?card 1 bottomcol_m newcolfromfreecell_m ?card 1
 ?card 1 home sendtohome ?card 1           is ?card 1 home_m sendtohome_m ?card 1
 ?card 2 on sendtonewcol ?card?oldcard 1   is ?card 2 on_m sendtonewcol_m ?card?oldcard 1
 ?card 1 bottomcol sendtohome-b ?card 1    is ?card 1 bottomcol_m sendtohome-b_m ?card 1
 ?card 2 on sendtofree ?card?oldcard 1     is ?card 2 on_m sendtofree_m ?card?oldcard 1
 ?card 2 value homefromfreecell ?card?vcard 1  is ?card 2 value_m homefromfreecell_m ?card?vcard 1
 ?cells 1 cellspace colfromfreecell ?cells 1  is ?cells 1 cellspace_m colfromfreecell_m ?cells 1
 ?cells 2 successor sendtofree-b ?cells?ncells 1  is ?cells 2 successor_m sendtofree-b_m ?cells?ncells 1
 ?cells 2 successor newcolfromfreecell ?ncells?cells 2  is ?cells 2 successor_m newcolfromfreecell_m ?ncells?cells 2
 ?cells 1 cellspace sendtofree-b ?cells 1  is ?cells 1 cellspace_m sendtofree-b_m ?cells 1
 ?cells 2 successor sendtofree ?cells?ncells 1  is ?cells 2 successor_m sendtofree_m ?cells?ncells 1
 ?cells 2 successor homefromfreecell ?ncells?cells 2  is ?cells 2 successor_m homefromfreecell_m ?ncells?cells 2
 ?cells 2 successor colfromfreecell ?ncells?cells 2  is ?cells 2 successor_m colfromfreecell_m ?ncells?cells 2
 ?cells 1 cellspace homefromfreecell ?cells 1  is ?cells 1 cellspace_m homefromfreecell_m ?cells 1
 ?cells 1 cellspace newcolfromfreecell ?cells 1  is ?cells 1 cellspace_m newcolfromfreecell_m ?cells 1
 ?cells 1 cellspace sendtofree ?cells 1    is ?cells 1 cellspace_m sendtofree_m ?cells 1
 ?cols 2 successor move-b ?ncols?cols 2    is ?cols 2 successor_m move-b_m ?ncols?cols 2
 ?cols 1 colspace sendtonewcol ?cols 1     is ?cols 1 colspace_m sendtonewcol_m ?cols 1
 ?cols 2 successor sendtonewcol ?cols?ncols 1  is ?cols 2 successor_m sendtonewcol_m ?cols?ncols 1
 ?cols 2 successor sendtohome-b ?ncols?cols 2  is ?cols 2 successor_m sendtohome-b_m ?ncols?cols 2
 ?cols 1 colspace sendtohome-b ?cols 1     is ?cols 1 colspace_m sendtohome-b_m ?cols 1
 ?cols 1 colspace move-b ?cols 1           is ?cols 1 colspace_m move-b_m ?cols 1
 ?cols 2 successor sendtofree-b ?ncols?cols 2  is ?cols 2 successor_m sendtofree-b_m ?ncols?cols 2
 ?cols 1 colspace newcolfromfreecell ?cols 1  is ?cols 1 colspace_m newcolfromfreecell_m ?cols 1
 ?cols 2 successor newcolfromfreecell ?cols?ncols 1  is ?cols 2 successor_m newcolfromfreecell_m ?cols?ncols 1
 ?cols 1 colspace sendtofree-b ?cols 1     is ?cols 1 colspace_m sendtofree-b_m ?cols 1
 ?ncells 2 successor colfromfreecell ?ncells?cells 1  is ?ncells 2 successor_m colfromfreecell_m ?ncells?cells 1
 ?ncells 1 cellspace sendtofree-b ?ncells 1  is ?ncells 1 cellspace_m sendtofree-b_m ?ncells 1
 ?ncells 1 cellspace newcolfromfreecell ?ncells 1  is ?ncells 1 cellspace_m newcolfromfreecell_m ?ncells 1
 ?ncells 2 successor homefromfreecell ?ncells?cells 1  is ?ncells 2 successor_m homefromfreecell_m ?ncells?cells 1
 ?ncells 1 cellspace homefromfreecell ?ncells 1  is ?ncells 1 cellspace_m homefromfreecell_m ?ncells 1
 ?ncells 2 successor sendtofree ?cells?ncells 2  is ?ncells 2 successor_m sendtofree_m ?cells?ncells 2
 ?ncells 2 successor newcolfromfreecell ?ncells?cells 1  is ?ncells 2 successor_m newcolfromfreecell_m ?ncells?cells 1
 ?ncells 1 cellspace colfromfreecell ?ncells 1  is ?ncells 1 cellspace_m colfromfreecell_m ?ncells 1
 ?ncells 1 cellspace sendtofree ?ncells 1  is ?ncells 1 cellspace_m sendtofree_m ?ncells 1
 ?ncells 2 successor sendtofree-b ?cells?ncells 2  is ?ncells 2 successor_m sendtofree-b_m ?cells?ncells 2
 ?ncols 2 successor sendtohome-b ?ncols?cols 1  is ?ncols 2 successor_m sendtohome-b_m ?ncols?cols 1
 ?ncols 2 successor sendtonewcol ?cols?ncols 2  is ?ncols 2 successor_m sendtonewcol_m ?cols?ncols 2
 ?ncols 1 colspace newcolfromfreecell ?ncols 1  is ?ncols 1 colspace_m newcolfromfreecell_m ?ncols 1
 ?ncols 2 successor newcolfromfreecell ?cols?ncols 2  is ?ncols 2 successor_m newcolfromfreecell_m ?cols?ncols 2
 ?ncols 1 colspace sendtohome-b ?ncols 1   is ?ncols 1 colspace_m sendtohome-b_m ?ncols 1
 ?ncols 1 colspace sendtonewcol ?ncols 1   is ?ncols 1 colspace_m sendtonewcol_m ?ncols 1
 ?ncols 2 successor move-b ?ncols?cols 1   is ?ncols 2 successor_m move-b_m ?ncols?cols 1
 ?ncols 1 colspace sendtofree-b ?ncols 1   is ?ncols 1 colspace_m sendtofree-b_m ?ncols 1
 ?ncols 2 successor sendtofree-b ?ncols?cols 1  is ?ncols 2 successor_m sendtofree-b_m ?ncols?cols 1
 ?ncols 1 colspace move-b ?ncols 1         is ?ncols 1 colspace_m move-b_m ?ncols 1
 ?homecard 1 home homefromfreecell ?homecard 1  is ?homecard 1 home_m homefromfreecell_m ?homecard 1
 ?homecard 2 value sendtohome ?homecard?vhomecard 1  is ?homecard 2 value_m sendtohome_m ?homecard?vhomecard 1
 ?homecard 2 value homefromfreecell ?homecard?vhomecard 1  is ?homecard 2 value_m homefromfreecell_m ?homecard?vhomecard 1
 ?homecard 2 suit sendtohome ?homecard?suit 1  is ?homecard 2 suit_m sendtohome_m ?homecard?suit 1
 ?homecard 2 suit homefromfreecell ?homecard?suit 1  is ?homecard 2 suit_m homefromfreecell_m ?homecard?suit 1
 ?homecard 2 suit sendtohome-b ?homecard?suit 1  is ?homecard 2 suit_m sendtohome-b_m ?homecard?suit 1
 ?homecard 1 home sendtohome ?homecard 1   is ?homecard 1 home_m sendtohome_m ?homecard 1
 ?homecard 1 home sendtohome-b ?homecard 1  is ?homecard 1 home_m sendtohome-b_m ?homecard 1
 ?homecard 2 value sendtohome-b ?homecard?vhomecard 1  is ?homecard 2 value_m sendtohome-b_m ?homecard?vhomecard 1
 ?newcard 2 canstack move ?card?newcard 2  is ?newcard 2 canstack_m move_m ?card?newcard 2
 ?newcard 2 on move-b ?card?newcard 2      is ?newcard 2 on_m move-b_m ?card?newcard 2
 ?newcard 2 on colfromfreecell ?card?newcard 2  is ?newcard 2 on_m colfromfreecell_m ?card?newcard 2
 ?newcard 2 canstack colfromfreecell ?card?newcard 2  is ?newcard 2 canstack_m colfromfreecell_m ?card?newcard 2
 ?newcard 2 on move ?card?newcard 2        is ?newcard 2 on_m move_m ?card?newcard 2
 ?newcard 1 clear move-b ?newcard 1        is ?newcard 1 clear_m move-b_m ?newcard 1
 ?newcard 1 clear colfromfreecell ?newcard 1  is ?newcard 1 clear_m colfromfreecell_m ?newcard 1
 ?newcard 1 clear move ?newcard 1          is ?newcard 1 clear_m move_m ?newcard 1
 ?newcard 2 canstack move-b ?card?newcard 2  is ?newcard 2 canstack_m move-b_m ?card?newcard 2
 ?oldcard 2 on sendtonewcol ?card?oldcard 2  is ?oldcard 2 on_m sendtonewcol_m ?card?oldcard 2
 ?oldcard 1 clear move ?oldcard 1          is ?oldcard 1 clear_m move_m ?oldcard 1
 ?oldcard 1 clear sendtonewcol ?oldcard 1  is ?oldcard 1 clear_m sendtonewcol_m ?oldcard 1
 ?oldcard 1 clear sendtohome ?oldcard 1    is ?oldcard 1 clear_m sendtohome_m ?oldcard 1
 ?oldcard 2 on sendtohome ?card?oldcard 2  is ?oldcard 2 on_m sendtohome_m ?card?oldcard 2
 ?oldcard 2 on move ?card?oldcard 2        is ?oldcard 2 on_m move_m ?card?oldcard 2
 ?oldcard 2 on sendtofree ?card?oldcard 2  is ?oldcard 2 on_m sendtofree_m ?card?oldcard 2
 ?oldcard 1 clear sendtofree ?oldcard 1    is ?oldcard 1 clear_m sendtofree_m ?oldcard 1
 ?suit 2 suit sendtohome-b ?homecard?suit 2  is ?suit 2 suit_m sendtohome-b_m ?homecard?suit 2
 ?suit 2 suit homefromfreecell ?card?suit 2  is ?suit 2 suit_m homefromfreecell_m ?card?suit 2
 ?suit 2 suit sendtohome ?homecard?suit 2  is ?suit 2 suit_m sendtohome_m ?homecard?suit 2
 ?suit 2 suit sendtohome-b ?card?suit 2    is ?suit 2 suit_m sendtohome-b_m ?card?suit 2
 ?suit 2 suit homefromfreecell ?homecard?suit 2  is ?suit 2 suit_m homefromfreecell_m ?homecard?suit 2
 ?suit 2 suit sendtohome ?card?suit 2      is ?suit 2 suit_m sendtohome_m ?card?suit 2
 ?vcard 2 value sendtohome ?card?vcard 2   is ?vcard 2 value_m sendtohome_m ?card?vcard 2
 ?vcard 2 value homefromfreecell ?card?vcard 2  is ?vcard 2 value_m homefromfreecell_m ?card?vcard 2
 ?vcard 2 successor homefromfreecell ?vcard?vhomecard 1  is ?vcard 2 successor_m homefromfreecell_m ?vcard?vhomecard 1
 ?vcard 2 successor sendtohome-b ?vcard?vhomecard 1  is ?vcard 2 successor_m sendtohome-b_m ?vcard?vhomecard 1
 ?vcard 2 successor sendtohome ?vcard?vhomecard 1  is ?vcard 2 successor_m sendtohome_m ?vcard?vhomecard 1
 ?vcard 2 value sendtohome-b ?card?vcard 2  is ?vcard 2 value_m sendtohome-b_m ?card?vcard 2
 ?vhomecard 2 successor sendtohome-b ?vcard?vhomecard 2  is ?vhomecard 2 successor_m sendtohome-b_m ?vcard?vhomecard 2
 ?vhomecard 2 successor sendtohome ?vcard?vhomecard 2  is ?vhomecard 2 successor_m sendtohome_m ?vcard?vhomecard 2
 ?vhomecard 2 value sendtohome-b ?homecard?vhomecard 2  is ?vhomecard 2 value_m sendtohome-b_m ?homecard?vhomecard 2
 ?vhomecard 2 value homefromfreecell ?homecard?vhomecard 2  is ?vhomecard 2 value_m homefromfreecell_m ?homecard?vhomecard 2
 ?vhomecard 2 value sendtohome ?homecard?vhomecard 2  is ?vhomecard 2 value_m sendtohome_m ?homecard?vhomecard 2
 ?vhomecard 2 successor homefromfreecell ?vcard?vhomecard 2  is ?vhomecard 2 successor_m homefromfreecell_m ?vcard?vhomecard 2
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'colfromfreecell': 'colfromfreecell_m', 'sendtohome': 'sendtohome_m', 'newcolfromfreecell': 'newcolfromfreecell_m', 'move-b': 'move-b_m', 'sendtofree-b': 'sendtofree-b_m', 'homefromfreecell': 'homefromfreecell_m', 'sendtohome-b': 'sendtohome-b_m', 'sendtonewcol': 'sendtonewcol_m', 'move': 'move_m', 'sendtofree': 'sendtofree_m'}
###########################
###########################
Predicates mapping
{'incell': 'incell_m', 'suit': 'suit_m', 'on': 'on_m', 'clear': 'clear_m', 'home': 'home_m', 'value': 'value_m', 'bottomcol': 'bottomcol_m', 'canstack': 'canstack_m', 'cellspace': 'cellspace_m', 'successor': 'successor_m', 'colspace': 'colspace_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  355.91
planning_task_time =  0.19
total_task_time =  356.1
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between freecell-strips-typed-domain.pddl and freecell-strips-typed-domain-M.pddl
************************************************************
Removing the macros from  freecell-strips-typed-domain.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Removing the macros from  freecell-strips-typed-domain-M.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is a macro move-sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain-M.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?card 1 incell colfromfreecell ?card 1    is ?card 1 incell colfromfreecell ?card 1
 ?card 2 suit sendtohome ?card?suit 1      is ?card 2 suit sendtohome ?card?suit 1
 ?card 1 incell newcolfromfreecell ?card 1  is ?card 1 incell newcolfromfreecell ?card 1
 ?card 2 on move-b ?card?newcard 1         is ?card 2 on move-b ?card?newcard 1
 ?card 1 clear sendtofree-b ?card 1        is ?card 1 clear sendtofree-b ?card 1
 ?card 2 suit homefromfreecell ?card?suit 1  is ?card 2 suit homefromfreecell ?card?suit 1
 ?card 1 home homefromfreecell ?card 1     is ?card 1 home homefromfreecell ?card 1
 ?card 2 value sendtohome-b ?card?vcard 1  is ?card 2 value sendtohome-b ?card?vcard 1
 ?card 1 clear sendtonewcol ?card 1        is ?card 1 clear sendtonewcol ?card 1
 ?card 2 value sendtohome ?card?vcard 1    is ?card 2 value sendtohome ?card?vcard 1
 ?card 1 clear move ?card 1                is ?card 1 clear move ?card 1
 ?card 1 incell homefromfreecell ?card 1   is ?card 1 incell homefromfreecell ?card 1
 ?card 2 on sendtohome ?card?oldcard 1     is ?card 2 on sendtohome ?card?oldcard 1
 ?card 1 clear sendtohome-b ?card 1        is ?card 1 clear sendtohome-b ?card 1
 ?card 1 clear sendtohome ?card 1          is ?card 1 clear sendtohome ?card 1
 ?card 1 bottomcol sendtofree-b ?card 1    is ?card 1 bottomcol sendtofree-b ?card 1
 ?card 2 on move ?card?oldcard 1           is ?card 2 on move ?card?oldcard 1
 ?card 2 on colfromfreecell ?card?newcard 1  is ?card 2 on colfromfreecell ?card?newcard 1
 ?card 2 canstack move-b ?card?newcard 1   is ?card 2 canstack move-b ?card?newcard 1
 ?card 2 on move ?card?newcard 1           is ?card 2 on move ?card?newcard 1
 ?card 2 canstack move ?card?newcard 1     is ?card 2 canstack move ?card?newcard 1
 ?card 1 incell sendtofree-b ?card 1       is ?card 1 incell sendtofree-b ?card 1
 ?card 1 incell sendtofree ?card 1         is ?card 1 incell sendtofree ?card 1
 ?card 2 suit sendtohome-b ?card?suit 1    is ?card 2 suit sendtohome-b ?card?suit 1
 ?card 1 bottomcol sendtonewcol ?card 1    is ?card 1 bottomcol sendtonewcol ?card 1
 ?card 1 clear move-b ?card 1              is ?card 1 clear move-b ?card 1
 ?card 2 canstack colfromfreecell ?card?newcard 1  is ?card 2 canstack colfromfreecell ?card?newcard 1
 ?card 1 home sendtohome-b ?card 1         is ?card 1 home sendtohome-b ?card 1
 ?card 1 bottomcol move-b ?card 1          is ?card 1 bottomcol move-b ?card 1
 ?card 1 clear newcolfromfreecell ?card 1  is ?card 1 clear newcolfromfreecell ?card 1
 ?card 1 clear colfromfreecell ?card 1     is ?card 1 clear colfromfreecell ?card 1
 ?card 1 clear sendtofree ?card 1          is ?card 1 clear sendtofree ?card 1
 ?card 1 bottomcol newcolfromfreecell ?card 1  is ?card 1 bottomcol newcolfromfreecell ?card 1
 ?card 1 home sendtohome ?card 1           is ?card 1 home sendtohome ?card 1
 ?card 2 on sendtonewcol ?card?oldcard 1   is ?card 2 on sendtonewcol ?card?oldcard 1
 ?card 1 bottomcol sendtohome-b ?card 1    is ?card 1 bottomcol sendtohome-b ?card 1
 ?card 2 on sendtofree ?card?oldcard 1     is ?card 2 on sendtofree ?card?oldcard 1
 ?card 2 value homefromfreecell ?card?vcard 1  is ?card 2 value homefromfreecell ?card?vcard 1
 ?cells 1 cellspace colfromfreecell ?cells 1  is ?cells 1 cellspace colfromfreecell ?cells 1
 ?cells 2 successor sendtofree-b ?cells?ncells 1  is ?cells 2 successor sendtofree-b ?cells?ncells 1
 ?cells 2 successor newcolfromfreecell ?ncells?cells 2  is ?cells 2 successor newcolfromfreecell ?ncells?cells 2
 ?cells 1 cellspace sendtofree-b ?cells 1  is ?cells 1 cellspace sendtofree-b ?cells 1
 ?cells 2 successor sendtofree ?cells?ncells 1  is ?cells 2 successor sendtofree ?cells?ncells 1
 ?cells 2 successor homefromfreecell ?ncells?cells 2  is ?cells 2 successor homefromfreecell ?ncells?cells 2
 ?cells 2 successor colfromfreecell ?ncells?cells 2  is ?cells 2 successor colfromfreecell ?ncells?cells 2
 ?cells 1 cellspace homefromfreecell ?cells 1  is ?cells 1 cellspace homefromfreecell ?cells 1
 ?cells 1 cellspace newcolfromfreecell ?cells 1  is ?cells 1 cellspace newcolfromfreecell ?cells 1
 ?cells 1 cellspace sendtofree ?cells 1    is ?cells 1 cellspace sendtofree ?cells 1
 ?cols 2 successor move-b ?ncols?cols 2    is ?cols 2 successor move-b ?ncols?cols 2
 ?cols 1 colspace sendtonewcol ?cols 1     is ?cols 1 colspace sendtonewcol ?cols 1
 ?cols 2 successor sendtonewcol ?cols?ncols 1  is ?cols 2 successor sendtonewcol ?cols?ncols 1
 ?cols 2 successor sendtohome-b ?ncols?cols 2  is ?cols 2 successor sendtohome-b ?ncols?cols 2
 ?cols 1 colspace sendtohome-b ?cols 1     is ?cols 1 colspace sendtohome-b ?cols 1
 ?cols 1 colspace move-b ?cols 1           is ?cols 1 colspace move-b ?cols 1
 ?cols 2 successor sendtofree-b ?ncols?cols 2  is ?cols 2 successor sendtofree-b ?ncols?cols 2
 ?cols 1 colspace newcolfromfreecell ?cols 1  is ?cols 1 colspace newcolfromfreecell ?cols 1
 ?cols 2 successor newcolfromfreecell ?cols?ncols 1  is ?cols 2 successor newcolfromfreecell ?cols?ncols 1
 ?cols 1 colspace sendtofree-b ?cols 1     is ?cols 1 colspace sendtofree-b ?cols 1
 ?ncells 2 successor colfromfreecell ?ncells?cells 1  is ?ncells 2 successor colfromfreecell ?ncells?cells 1
 ?ncells 1 cellspace sendtofree-b ?ncells 1  is ?ncells 1 cellspace sendtofree-b ?ncells 1
 ?ncells 1 cellspace newcolfromfreecell ?ncells 1  is ?ncells 1 cellspace newcolfromfreecell ?ncells 1
 ?ncells 2 successor homefromfreecell ?ncells?cells 1  is ?ncells 2 successor homefromfreecell ?ncells?cells 1
 ?ncells 1 cellspace homefromfreecell ?ncells 1  is ?ncells 1 cellspace homefromfreecell ?ncells 1
 ?ncells 2 successor sendtofree ?cells?ncells 2  is ?ncells 2 successor sendtofree ?cells?ncells 2
 ?ncells 2 successor newcolfromfreecell ?ncells?cells 1  is ?ncells 2 successor newcolfromfreecell ?ncells?cells 1
 ?ncells 1 cellspace colfromfreecell ?ncells 1  is ?ncells 1 cellspace colfromfreecell ?ncells 1
 ?ncells 1 cellspace sendtofree ?ncells 1  is ?ncells 1 cellspace sendtofree ?ncells 1
 ?ncells 2 successor sendtofree-b ?cells?ncells 2  is ?ncells 2 successor sendtofree-b ?cells?ncells 2
 ?ncols 2 successor sendtohome-b ?ncols?cols 1  is ?ncols 2 successor sendtohome-b ?ncols?cols 1
 ?ncols 2 successor sendtonewcol ?cols?ncols 2  is ?ncols 2 successor sendtonewcol ?cols?ncols 2
 ?ncols 1 colspace newcolfromfreecell ?ncols 1  is ?ncols 1 colspace newcolfromfreecell ?ncols 1
 ?ncols 2 successor newcolfromfreecell ?cols?ncols 2  is ?ncols 2 successor newcolfromfreecell ?cols?ncols 2
 ?ncols 1 colspace sendtohome-b ?ncols 1   is ?ncols 1 colspace sendtohome-b ?ncols 1
 ?ncols 1 colspace sendtonewcol ?ncols 1   is ?ncols 1 colspace sendtonewcol ?ncols 1
 ?ncols 2 successor move-b ?ncols?cols 1   is ?ncols 2 successor move-b ?ncols?cols 1
 ?ncols 1 colspace sendtofree-b ?ncols 1   is ?ncols 1 colspace sendtofree-b ?ncols 1
 ?ncols 2 successor sendtofree-b ?ncols?cols 1  is ?ncols 2 successor sendtofree-b ?ncols?cols 1
 ?ncols 1 colspace move-b ?ncols 1         is ?ncols 1 colspace move-b ?ncols 1
 ?homecard 1 home homefromfreecell ?homecard 1  is ?homecard 1 home homefromfreecell ?homecard 1
 ?homecard 2 value sendtohome ?homecard?vhomecard 1  is ?homecard 2 value sendtohome ?homecard?vhomecard 1
 ?homecard 2 value homefromfreecell ?homecard?vhomecard 1  is ?homecard 2 value homefromfreecell ?homecard?vhomecard 1
 ?homecard 2 suit sendtohome ?homecard?suit 1  is ?homecard 2 suit sendtohome ?homecard?suit 1
 ?homecard 2 suit homefromfreecell ?homecard?suit 1  is ?homecard 2 suit homefromfreecell ?homecard?suit 1
 ?homecard 2 suit sendtohome-b ?homecard?suit 1  is ?homecard 2 suit sendtohome-b ?homecard?suit 1
 ?homecard 1 home sendtohome ?homecard 1   is ?homecard 1 home sendtohome ?homecard 1
 ?homecard 1 home sendtohome-b ?homecard 1  is ?homecard 1 home sendtohome-b ?homecard 1
 ?homecard 2 value sendtohome-b ?homecard?vhomecard 1  is ?homecard 2 value sendtohome-b ?homecard?vhomecard 1
 ?newcard 2 canstack move ?card?newcard 2  is ?newcard 2 canstack move ?card?newcard 2
 ?newcard 2 on move-b ?card?newcard 2      is ?newcard 2 on move-b ?card?newcard 2
 ?newcard 2 on colfromfreecell ?card?newcard 2  is ?newcard 2 on colfromfreecell ?card?newcard 2
 ?newcard 2 canstack colfromfreecell ?card?newcard 2  is ?newcard 2 canstack colfromfreecell ?card?newcard 2
 ?newcard 2 on move ?card?newcard 2        is ?newcard 2 on move ?card?newcard 2
 ?newcard 1 clear move-b ?newcard 1        is ?newcard 1 clear move-b ?newcard 1
 ?newcard 1 clear colfromfreecell ?newcard 1  is ?newcard 1 clear colfromfreecell ?newcard 1
 ?newcard 1 clear move ?newcard 1          is ?newcard 1 clear move ?newcard 1
 ?newcard 2 canstack move-b ?card?newcard 2  is ?newcard 2 canstack move-b ?card?newcard 2
 ?oldcard 2 on sendtonewcol ?card?oldcard 2  is ?oldcard 2 on sendtonewcol ?card?oldcard 2
 ?oldcard 1 clear move ?oldcard 1          is ?oldcard 1 clear move ?oldcard 1
 ?oldcard 1 clear sendtonewcol ?oldcard 1  is ?oldcard 1 clear sendtonewcol ?oldcard 1
 ?oldcard 1 clear sendtohome ?oldcard 1    is ?oldcard 1 clear sendtohome ?oldcard 1
 ?oldcard 2 on sendtohome ?card?oldcard 2  is ?oldcard 2 on sendtohome ?card?oldcard 2
 ?oldcard 2 on move ?card?oldcard 2        is ?oldcard 2 on move ?card?oldcard 2
 ?oldcard 2 on sendtofree ?card?oldcard 2  is ?oldcard 2 on sendtofree ?card?oldcard 2
 ?oldcard 1 clear sendtofree ?oldcard 1    is ?oldcard 1 clear sendtofree ?oldcard 1
 ?suit 2 suit sendtohome-b ?homecard?suit 2  is ?suit 2 suit sendtohome-b ?homecard?suit 2
 ?suit 2 suit homefromfreecell ?card?suit 2  is ?suit 2 suit homefromfreecell ?card?suit 2
 ?suit 2 suit sendtohome ?homecard?suit 2  is ?suit 2 suit sendtohome ?homecard?suit 2
 ?suit 2 suit sendtohome-b ?card?suit 2    is ?suit 2 suit sendtohome-b ?card?suit 2
 ?suit 2 suit homefromfreecell ?homecard?suit 2  is ?suit 2 suit homefromfreecell ?homecard?suit 2
 ?suit 2 suit sendtohome ?card?suit 2      is ?suit 2 suit sendtohome ?card?suit 2
 ?vcard 2 value sendtohome ?card?vcard 2   is ?vcard 2 value sendtohome ?card?vcard 2
 ?vcard 2 value homefromfreecell ?card?vcard 2  is ?vcard 2 value homefromfreecell ?card?vcard 2
 ?vcard 2 successor homefromfreecell ?vcard?vhomecard 1  is ?vcard 2 successor homefromfreecell ?vcard?vhomecard 1
 ?vcard 2 successor sendtohome-b ?vcard?vhomecard 1  is ?vcard 2 successor sendtohome-b ?vcard?vhomecard 1
 ?vcard 2 successor sendtohome ?vcard?vhomecard 1  is ?vcard 2 successor sendtohome ?vcard?vhomecard 1
 ?vcard 2 value sendtohome-b ?card?vcard 2  is ?vcard 2 value sendtohome-b ?card?vcard 2
 ?vhomecard 2 successor sendtohome-b ?vcard?vhomecard 2  is ?vhomecard 2 successor sendtohome-b ?vcard?vhomecard 2
 ?vhomecard 2 successor sendtohome ?vcard?vhomecard 2  is ?vhomecard 2 successor sendtohome ?vcard?vhomecard 2
 ?vhomecard 2 value sendtohome-b ?homecard?vhomecard 2  is ?vhomecard 2 value sendtohome-b ?homecard?vhomecard 2
 ?vhomecard 2 value homefromfreecell ?homecard?vhomecard 2  is ?vhomecard 2 value homefromfreecell ?homecard?vhomecard 2
 ?vhomecard 2 value sendtohome ?homecard?vhomecard 2  is ?vhomecard 2 value sendtohome ?homecard?vhomecard 2
 ?vhomecard 2 successor homefromfreecell ?vcard?vhomecard 2  is ?vhomecard 2 successor homefromfreecell ?vcard?vhomecard 2
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'colfromfreecell': 'colfromfreecell', 'sendtohome': 'sendtohome', 'newcolfromfreecell': 'newcolfromfreecell', 'move-b': 'move-b', 'sendtofree-b': 'sendtofree-b', 'homefromfreecell': 'homefromfreecell', 'sendtohome-b': 'sendtohome-b', 'sendtonewcol': 'sendtonewcol', 'move': 'move', 'sendtofree': 'sendtofree'}
###########################
###########################
Predicates mapping
{'incell': 'incell', 'suit': 'suit', 'on': 'on', 'clear': 'clear', 'home': 'home', 'value': 'value', 'bottomcol': 'bottomcol', 'canstack': 'canstack', 'cellspace': 'cellspace', 'successor': 'successor', 'colspace': 'colspace'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  409.75
planning_task_time =  0.3
total_task_time =  410.05
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between freecell-strips-typed-domain.pddl and freecell-strips-typed-domain_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  freecell-strips-typed-domain.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Removing the macros from  freecell-strips-typed-domain_swapped_two_variables_in_atom.pddl
The action is not a macro move_m
The action is not a macro move-b_m
The action is not a macro sendtofree_m
The action is not a macro sendtofree-b_m
The action is not a macro sendtonewcol_m
The action is not a macro sendtohome_m
The action is not a macro sendtohome-b_m
The action is not a macro homefromfreecell_m
The action is not a macro colfromfreecell_m
The action is not a macro newcolfromfreecell_m
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain_swapped_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'move': ['move_m'], 'move-b': [], 'sendtofree': ['sendtofree_m'], 'sendtofree-b': ['sendtofree-b_m'], 'sendtonewcol': ['sendtonewcol_m'], 'sendtohome': ['sendtohome_m'], 'sendtohome-b': ['sendtohome-b_m'], 'homefromfreecell': ['homefromfreecell_m'], 'colfromfreecell': ['colfromfreecell_m'], 'newcolfromfreecell': ['newcolfromfreecell_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.29
total_task_time =  0.29
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between freecell-strips-typed-domain.pddl and freecell-strips-typed-domain_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  freecell-strips-typed-domain.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Removing the macros from  freecell-strips-typed-domain_swapped_two_atoms_between_two_parts.pddl
The action is not a macro move_m
The action is not a macro move-b_m
The action is not a macro sendtofree_m
The action is not a macro sendtofree-b_m
The action is not a macro sendtonewcol_m
The action is not a macro sendtohome_m
The action is not a macro sendtohome-b_m
The action is not a macro homefromfreecell_m
The action is not a macro colfromfreecell_m
The action is not a macro newcolfromfreecell_m
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain_swapped_two_atoms_between_two_parts.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'move': ['move_m'], 'move-b': [], 'sendtofree': ['sendtofree_m'], 'sendtofree-b': ['sendtofree-b_m'], 'sendtonewcol': ['sendtonewcol_m'], 'sendtohome': ['sendtohome_m'], 'sendtohome-b': ['sendtohome-b_m'], 'homefromfreecell': ['homefromfreecell_m'], 'colfromfreecell': ['colfromfreecell_m'], 'newcolfromfreecell': ['newcolfromfreecell_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.27
total_task_time =  0.28
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between freecell-strips-typed-domain.pddl and freecell-strips-typed-domain_delete_operator.pddl
************************************************************
Removing the macros from  freecell-strips-typed-domain.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Removing the macros from  freecell-strips-typed-domain_delete_operator.pddl
The action is not a macro move_m
The action is not a macro move-b_m
The action is not a macro sendtofree_m
The action is not a macro sendtofree-b_m
The action is not a macro sendtonewcol_m
The action is not a macro sendtohome-b_m
The action is not a macro homefromfreecell_m
The action is not a macro colfromfreecell_m
The action is not a macro newcolfromfreecell_m
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.25
total_task_time =  0.25
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between freecell-strips-typed-domain.pddl and freecell-strips-typed-domain_invalid_macro.pddl
************************************************************
Removing the macros from  freecell-strips-typed-domain.pddl
The action is not a macro move
The action is not a macro move-b
The action is not a macro sendtofree
The action is not a macro sendtofree-b
The action is not a macro sendtonewcol
The action is not a macro sendtohome
The action is not a macro sendtohome-b
The action is not a macro homefromfreecell
The action is not a macro colfromfreecell
The action is not a macro newcolfromfreecell
Removing the macros from  freecell-strips-typed-domain_invalid_macro.pddl
The action is not a macro move_m
The action is not a macro move-b_m
The action is not a macro sendtofree_m
The action is not a macro sendtofree-b_m
The action is not a macro sendtonewcol_m
The action is not a macro sendtohome_m
The action is not a macro sendtohome-b_m
The action is not a macro homefromfreecell_m
The action is not a macro colfromfreecell_m
The action is not a macro newcolfromfreecell_m
The action is not a macro move-move-b-sendtofree_m
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain freecell-strips-typed-domain_invalid_macro.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.27
total_task_time =  0.27
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between hiking-sequential-satisficing.pddl and hiking-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  hiking-sequential-satisficing.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is not a macro drive_tent
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Removing the macros from  hiking-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
The action is not a macro put_down_m
The action is not a macro put_up_m
The action is not a macro drive_passenger_m
The action is a macro drive_m
The action is not a macro drive_tent_m
The action is a macro drive_tent_passenger_m
The action is not a macro walk_together_m
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
failed to solve
Domain1 and Domain2 are not functionally equivalent! Because at least one primitive operator in D1 cannot be mapped to a primitive operator in D2 as per the operator-structure theorem !
At least one primitive operator in D1 cannot be mapped to a primitive operator in D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  20.18
planning_task_time =  0.19
total_task_time =  20.37
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between hiking-sequential-satisficing.pddl and hiking-sequential-satisficing-M.pddl
************************************************************
Removing the macros from  hiking-sequential-satisficing.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is not a macro drive_tent
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Removing the macros from  hiking-sequential-satisficing-M.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is a macro drive_tent
The action is not a macro drive_tent_put_up
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing-M.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'put_down': ['put_down', 'put_up'], 'put_up': ['put_down', 'put_up'], 'drive_passenger': ['drive_passenger'], 'drive_tent': [], 'walk_together': ['walk_together']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.2
total_task_time =  0.2
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between hiking-sequential-satisficing.pddl and hiking-sequential-satisficing_invalid_macro.pddl
************************************************************
Removing the macros from  hiking-sequential-satisficing.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is not a macro drive_tent
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Removing the macros from  hiking-sequential-satisficing_invalid_macro.pddl
The action is not a macro put_down_m
The action is not a macro put_up_m
The action is not a macro drive_passenger_m
The action is a macro drive_m
The action is not a macro drive_tent_m
The action is a macro drive_tent_passenger_m
The action is not a macro walk_together_m
The action is not a macro put_down-put_up-drive_passenger_m
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing_invalid_macro.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.18
total_task_time =  0.19
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between hiking-sequential-satisficing.pddl and hiking-sequential-satisficing_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  hiking-sequential-satisficing.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is not a macro drive_tent
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Removing the macros from  hiking-sequential-satisficing_swapped_two_variables_in_atom.pddl
The action is not a macro put_down_m
The action is not a macro put_up_m
The action is not a macro drive_passenger_m
The action is not a macro drive_m
The action is not a macro drive_tent_m
The action is not a macro drive_tent_passenger_m
The action is not a macro walk_together_m
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing_swapped_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.17
total_task_time =  0.17
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between hiking-sequential-satisficing.pddl and hiking-sequential-satisficing_valid_macro.pddl
************************************************************
Removing the macros from  hiking-sequential-satisficing.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is not a macro drive_tent
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Removing the macros from  hiking-sequential-satisficing_valid_macro.pddl
The action is not a macro put_down_m
The action is not a macro put_up_m
The action is not a macro drive_passenger_m
The action is a macro drive_m
The action is not a macro drive_tent_m
The action is a macro drive_tent_passenger_m
The action is not a macro walk_together_m
The action is a macro put_down-put_up-drive_passenger_m
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?x2 2 at_car drive_tent ?x4?x2 2          is ?x2 2 at_car_m drive_tent_m ?x4?x2 2
 ?x2 2 at_tent put_down ?x3?x2 2           is ?x2 2 at_tent_m put_down_m ?x3?x2 2
 ?x2 2 at_person drive_passenger ?x1?x2 2  is ?x2 2 at_person_m drive_passenger_m ?x5?x2 2
 ?x2 2 at_person walk_together ?x5?x2 2    is ?x2 2 at_person_m walk_together_m ?x5?x2 2
 ?x2 2 at_person put_down ?x1?x2 2         is ?x2 2 at_person_m put_down_m ?x1?x2 2
 ?x2 2 at_tent walk_together ?x1?x2 2      is ?x2 2 at_tent_m walk_together_m ?x1?x2 2
 ?x2 2 at_person walk_together ?x3?x2 2    is ?x2 2 at_person_m walk_together_m ?x3?x2 2
 ?x2 2 walked walk_together ?x6?x2 2       is ?x2 2 walked_m walk_together_m ?x6?x2 2
 ?x2 2 at_person put_up ?x1?x2 2           is ?x2 2 at_person_m put_up_m ?x1?x2 2
 ?x2 2 at_tent drive_tent ?x5?x2 2         is ?x2 2 at_tent_m drive_tent_m ?x5?x2 2
 ?x2 2 next walk_together ?x4?x2 2         is ?x2 2 next_m walk_together_m ?x4?x2 2
 ?x2 2 at_tent put_up ?x3?x2 2             is ?x2 2 at_tent_m put_up_m ?x3?x2 2
 ?x2 2 at_person drive_passenger ?x5?x2 2  is ?x2 2 at_person_m drive_passenger_m ?x1?x2 2
 ?x2 2 at_person drive_tent ?x1?x2 2       is ?x2 2 at_person_m drive_tent_m ?x1?x2 2
 ?x2 2 at_car drive_passenger ?x4?x2 2     is ?x2 2 at_car_m drive_passenger_m ?x4?x2 2
 ?x3 2 at_car drive_passenger ?x4?x3 2     is ?x3 2 at_car_m drive_passenger_m ?x4?x3 2
 ?x3 3 partners walk_together ?x6?x3?x5 2  is ?x3 3 partners_m walk_together_m ?x6?x3?x5 2
 ?x3 2 at_tent put_down ?x3?x2 1           is ?x3 2 at_tent_m put_down_m ?x3?x2 1
 ?x3 1 up put_up ?x3 1                     is ?x3 1 up_m put_up_m ?x3 1
 ?x3 2 at_car drive_tent ?x4?x3 2          is ?x3 2 at_car_m drive_tent_m ?x4?x3 2
 ?x3 2 at_person walk_together ?x3?x4 1    is ?x3 2 at_person_m walk_together_m ?x3?x4 1
 ?x3 2 at_tent drive_tent ?x5?x3 2         is ?x3 2 at_tent_m drive_tent_m ?x5?x3 2
 ?x3 1 down put_up ?x3 1                   is ?x3 1 down_m put_up_m ?x3 1
 ?x3 1 down put_down ?x3 1                 is ?x3 1 down_m put_down_m ?x3 1
 ?x3 2 at_tent put_up ?x3?x2 1             is ?x3 2 at_tent_m put_up_m ?x3?x2 1
 ?x3 2 at_person drive_passenger ?x5?x3 2  is ?x3 2 at_person_m drive_passenger_m ?x1?x3 2
 ?x3 2 at_person drive_passenger ?x1?x3 2  is ?x3 2 at_person_m drive_passenger_m ?x5?x3 2
 ?x3 2 at_person walk_together ?x3?x2 1    is ?x3 2 at_person_m walk_together_m ?x3?x2 1
 ?x3 1 up put_down ?x3 1                   is ?x3 1 up_m put_down_m ?x3 1
 ?x3 2 at_person drive_tent ?x1?x3 2       is ?x3 2 at_person_m drive_tent_m ?x1?x3 2
 ?x1 2 at_tent walk_together ?x1?x2 1      is ?x1 2 at_tent_m walk_together_m ?x1?x2 1
 ?x1 1 up walk_together ?x1 1              is ?x1 1 up_m walk_together_m ?x1 1
 ?x1 2 at_person put_down ?x1?x2 1         is ?x1 2 at_person_m put_down_m ?x1?x2 1
 ?x1 2 at_person put_up ?x1?x2 1           is ?x1 2 at_person_m put_up_m ?x1?x2 1
 ?x1 2 at_person drive_tent ?x1?x3 1       is ?x1 2 at_person_m drive_tent_m ?x1?x3 1
 ?x1 2 at_person drive_passenger ?x1?x2 1  is ?x5 2 at_person_m drive_passenger_m ?x5?x2 1
 ?x1 2 at_person drive_tent ?x1?x2 1       is ?x1 2 at_person_m drive_tent_m ?x1?x2 1
 ?x1 2 at_person drive_passenger ?x1?x3 1  is ?x5 2 at_person_m drive_passenger_m ?x5?x3 1
 ?x4 2 at_car drive_tent ?x4?x3 1          is ?x4 2 at_car_m drive_tent_m ?x4?x3 1
 ?x4 2 walked walk_together ?x6?x4 2       is ?x4 2 walked_m walk_together_m ?x6?x4 2
 ?x4 2 at_person walk_together ?x5?x4 2    is ?x4 2 at_person_m walk_together_m ?x5?x4 2
 ?x4 2 at_person walk_together ?x3?x4 2    is ?x4 2 at_person_m walk_together_m ?x3?x4 2
 ?x4 2 at_car drive_passenger ?x4?x3 1     is ?x4 2 at_car_m drive_passenger_m ?x4?x3 1
 ?x4 2 next walk_together ?x4?x2 1         is ?x4 2 next_m walk_together_m ?x4?x2 1
 ?x4 2 at_car drive_tent ?x4?x2 1          is ?x4 2 at_car_m drive_tent_m ?x4?x2 1
 ?x4 2 at_car drive_passenger ?x4?x2 1     is ?x4 2 at_car_m drive_passenger_m ?x4?x2 1
 ?x5 2 at_person drive_passenger ?x5?x3 1  is ?x1 2 at_person_m drive_passenger_m ?x1?x3 1
 ?x5 3 partners walk_together ?x6?x3?x5 3  is ?x5 3 partners_m walk_together_m ?x6?x3?x5 3
 ?x5 2 at_tent drive_tent ?x5?x2 1         is ?x5 2 at_tent_m drive_tent_m ?x5?x2 1
 ?x5 2 at_tent drive_tent ?x5?x3 1         is ?x5 2 at_tent_m drive_tent_m ?x5?x3 1
 ?x5 2 at_person walk_together ?x5?x4 1    is ?x5 2 at_person_m walk_together_m ?x5?x4 1
 ?x5 2 at_person walk_together ?x5?x2 1    is ?x5 2 at_person_m walk_together_m ?x5?x2 1
 ?x5 1 down drive_tent ?x5 1               is ?x5 1 down_m drive_tent_m ?x5 1
 ?x5 2 at_person drive_passenger ?x5?x2 1  is ?x1 2 at_person_m drive_passenger_m ?x1?x2 1
 ?x6 2 walked walk_together ?x6?x4 1       is ?x6 2 walked_m walk_together_m ?x6?x4 1
 ?x6 2 walked walk_together ?x6?x2 1       is ?x6 2 walked_m walk_together_m ?x6?x2 1
 ?x6 3 partners walk_together ?x6?x3?x5 1  is ?x6 3 partners_m walk_together_m ?x6?x3?x5 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'drive_tent': 'drive_tent_m', 'put_down': 'put_down_m', 'drive_passenger': 'drive_passenger_m', 'walk_together': 'walk_together_m', 'put_up': 'put_up_m'}
###########################
###########################
Predicates mapping
{'at_car': 'at_car_m', 'at_tent': 'at_tent_m', 'at_person': 'at_person_m', 'walked': 'walked_m', 'next': 'next_m', 'partners': 'partners_m', 'up': 'up_m', 'down': 'down_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  19.24
planning_task_time =  0.19
total_task_time =  19.42
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between hiking-sequential-satisficing.pddl and hiking-sequential-satisficing_delete_operator.pddl
************************************************************
Removing the macros from  hiking-sequential-satisficing.pddl
The action is not a macro put_down
The action is not a macro put_up
The action is not a macro drive_passenger
The action is a macro drive
The action is not a macro drive_tent
The action is a macro drive_tent_passenger
The action is not a macro walk_together
Removing the macros from  hiking-sequential-satisficing_delete_operator.pddl
The action is not a macro put_down_m
The action is not a macro put_up_m
The action is not a macro drive_passenger_m
The action is a macro drive_m
The action is not a macro drive_tent_passenger_m
The action is not a macro walk_together_m
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain hiking-sequential-satisficing_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'put_down': ['put_down_m', 'put_up_m'], 'put_up': ['put_down_m', 'put_up_m'], 'drive_passenger': ['drive_passenger_m'], 'drive_tent': [], 'walk_together': ['walk_together_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.18
total_task_time =  0.18
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between logistics-strips-typed.pddl and logistics-strips-typed_valid_macro.pddl
************************************************************
Removing the macros from  logistics-strips-typed.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
Removing the macros from  logistics-strips-typed_valid_macro.pddl
The action is not a macro load-truck-location_m
The action is not a macro load-truck-airport_m
The action is not a macro load-airplane_m
The action is not a macro unload-truck-location_m
The action is not a macro unload-truck-airport_m
The action is not a macro unload-airplane_m
The action is not a macro drive-truck-location-location_m
The action is not a macro drive-truck-location-airport_m
The action is not a macro drive-truck-airport-location_m
The action is not a macro drive-truck-airport-airport_m
The action is not a macro fly-airplane_m
The action is a macro load-truck-location-load-truck-airport-load-airplane_m
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?truck 2 in-truck load-truck-airport ?pkg?truck 2  is ?truck 2 in-truck_m load-truck-airport_m ?pkg?truck 2
 ?truck 2 at-truck-location unload-truck-location ?truck?loc 1  is ?truck 2 at-truck-location_m unload-truck-location_m ?truck?loc 1
 ?truck 2 at-truck-airport load-truck-airport ?truck?loc 1  is ?truck 2 at-truck-airport_m load-truck-airport_m ?truck?loc 1
 ?truck 2 in-truck unload-truck-airport ?pkg?truck 2  is ?truck 2 in-truck_m unload-truck-airport_m ?pkg?truck 2
 ?truck 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 1  is ?truck 2 at-truck-airport_m drive-truck-location-airport_m ?truck?loc-to 1
 ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-from 1  is ?truck 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-from 1
 ?truck 2 at-truck-location drive-truck-airport-location ?truck?loc-to 1  is ?truck 2 at-truck-location_m drive-truck-airport-location_m ?truck?loc-to 1
 ?truck 2 in-truck unload-truck-location ?pkg?truck 2  is ?truck 2 in-truck_m unload-truck-location_m ?pkg?truck 2
 ?truck 2 at-truck-airport unload-truck-airport ?truck?loc 1  is ?truck 2 at-truck-airport_m unload-truck-airport_m ?truck?loc 1
 ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-to 1  is ?truck 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-to 1
 ?truck 2 at-truck-location load-truck-location ?truck?loc 1  is ?truck 2 at-truck-location_m load-truck-location_m ?truck?loc 1
 ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 1  is ?truck 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-from 1
 ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 1  is ?truck 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-to 1
 ?truck 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 1  is ?truck 2 at-truck-airport_m drive-truck-airport-location_m ?truck?loc-from 1
 ?truck 2 at-truck-location drive-truck-location-airport ?truck?loc-from 1  is ?truck 2 at-truck-location_m drive-truck-location-airport_m ?truck?loc-from 1
 ?truck 2 in-truck load-truck-location ?pkg?truck 2  is ?truck 2 in-truck_m load-truck-location_m ?pkg?truck 2
 ?loc 2 at-package-location load-truck-location ?pkg?loc 2  is ?loc 2 at-package-location_m load-truck-location_m ?pkg?loc 2
 ?loc 2 at-truck-airport load-truck-airport ?truck?loc 2  is ?loc 2 at-truck-airport_m load-truck-airport_m ?truck?loc 2
 ?loc 2 at-package-airport load-airplane ?pkg?loc 2  is ?loc 2 at-package-airport_m load-airplane_m ?pkg?loc 2
 ?loc 2 at-truck-location unload-truck-location ?truck?loc 2  is ?loc 2 at-truck-location_m unload-truck-location_m ?truck?loc 2
 ?loc 2 at-package-airport unload-airplane ?pkg?loc 2  is ?loc 2 at-package-airport_m unload-airplane_m ?pkg?loc 2
 ?loc 2 at-airplane-airport load-airplane ?airplane?loc 2  is ?loc 2 at-airplane-airport_m load-airplane_m ?airplane?loc 2
 ?loc 2 at-package-airport unload-truck-airport ?pkg?loc 2  is ?loc 2 at-package-airport_m unload-truck-airport_m ?pkg?loc 2
 ?loc 2 at-package-airport load-truck-airport ?pkg?loc 2  is ?loc 2 at-package-airport_m load-truck-airport_m ?pkg?loc 2
 ?loc 2 at-truck-airport unload-truck-airport ?truck?loc 2  is ?loc 2 at-truck-airport_m unload-truck-airport_m ?truck?loc 2
 ?loc 2 at-package-location unload-truck-location ?pkg?loc 2  is ?loc 2 at-package-location_m unload-truck-location_m ?pkg?loc 2
 ?loc 2 at-truck-location load-truck-location ?truck?loc 2  is ?loc 2 at-truck-location_m load-truck-location_m ?truck?loc 2
 ?loc 2 at-airplane-airport unload-airplane ?airplane?loc 2  is ?loc 2 at-airplane-airport_m unload-airplane_m ?airplane?loc 2
 ?pkg 2 in-truck load-truck-location ?pkg?truck 1  is ?pkg 2 in-truck_m load-truck-location_m ?pkg?truck 1
 ?pkg 2 at-package-location unload-truck-location ?pkg?loc 1  is ?pkg 2 at-package-location_m unload-truck-location_m ?pkg?loc 1
 ?pkg 2 at-package-airport load-truck-airport ?pkg?loc 1  is ?pkg 2 at-package-airport_m load-truck-airport_m ?pkg?loc 1
 ?pkg 2 at-package-location load-truck-location ?pkg?loc 1  is ?pkg 2 at-package-location_m load-truck-location_m ?pkg?loc 1
 ?pkg 2 in-truck unload-truck-location ?pkg?truck 1  is ?pkg 2 in-truck_m unload-truck-location_m ?pkg?truck 1
 ?pkg 2 at-package-airport unload-truck-airport ?pkg?loc 1  is ?pkg 2 at-package-airport_m unload-truck-airport_m ?pkg?loc 1
 ?pkg 2 in-truck unload-truck-airport ?pkg?truck 1  is ?pkg 2 in-truck_m unload-truck-airport_m ?pkg?truck 1
 ?pkg 2 at-package-airport unload-airplane ?pkg?loc 1  is ?pkg 2 at-package-airport_m unload-airplane_m ?pkg?loc 1
 ?pkg 2 in-truck load-truck-airport ?pkg?truck 1  is ?pkg 2 in-truck_m load-truck-airport_m ?pkg?truck 1
 ?pkg 2 in-airplane load-airplane ?pkg?airplane 1  is ?pkg 2 in-airplane_m load-airplane_m ?pkg?airplane 1
 ?pkg 2 at-package-airport load-airplane ?pkg?loc 1  is ?pkg 2 at-package-airport_m load-airplane_m ?pkg?loc 1
 ?pkg 2 in-airplane unload-airplane ?pkg?airplane 1  is ?pkg 2 in-airplane_m unload-airplane_m ?pkg?airplane 1
 ?loc-from 2 airport-in-city drive-truck-airport-airport ?loc-from?city 1  is ?loc-from 2 airport-in-city_m drive-truck-airport-airport_m ?loc-from?city 1
 ?loc-from 2 location-in-city drive-truck-location-location ?loc-from?city 1  is ?loc-from 2 location-in-city_m drive-truck-location-location_m ?loc-from?city 1
 ?loc-from 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 2  is ?loc-from 2 at-truck-airport_m drive-truck-airport-location_m ?truck?loc-from 2
 ?loc-from 2 at-truck-location drive-truck-location-airport ?truck?loc-from 2  is ?loc-from 2 at-truck-location_m drive-truck-location-airport_m ?truck?loc-from 2
 ?loc-from 2 location-in-city drive-truck-location-airport ?loc-from?city 1  is ?loc-from 2 location-in-city_m drive-truck-location-airport_m ?loc-from?city 1
 ?loc-from 2 at-airplane-airport fly-airplane ?airplane?loc-from 2  is ?loc-from 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-from 2
 ?loc-from 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 2  is ?loc-from 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-from 2
 ?loc-from 2 airport-in-city drive-truck-airport-location ?loc-from?city 1  is ?loc-from 2 airport-in-city_m drive-truck-airport-location_m ?loc-from?city 1
 ?loc-from 2 at-truck-location drive-truck-location-location ?truck?loc-from 2  is ?loc-from 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-from 2
 ?loc-to 2 location-in-city drive-truck-location-location ?loc-to?city 1  is ?loc-to 2 location-in-city_m drive-truck-location-location_m ?loc-to?city 1
 ?loc-to 2 airport-in-city drive-truck-location-airport ?loc-to?city 1  is ?loc-to 2 airport-in-city_m drive-truck-location-airport_m ?loc-to?city 1
 ?loc-to 2 location-in-city drive-truck-airport-location ?loc-to?city 1  is ?loc-to 2 location-in-city_m drive-truck-airport-location_m ?loc-to?city 1
 ?loc-to 2 airport-in-city drive-truck-airport-airport ?loc-to?city 1  is ?loc-to 2 airport-in-city_m drive-truck-airport-airport_m ?loc-to?city 1
 ?loc-to 2 at-truck-location drive-truck-airport-location ?truck?loc-to 2  is ?loc-to 2 at-truck-location_m drive-truck-airport-location_m ?truck?loc-to 2
 ?loc-to 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 2  is ?loc-to 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-to 2
 ?loc-to 2 at-truck-location drive-truck-location-location ?truck?loc-to 2  is ?loc-to 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-to 2
 ?loc-to 2 at-airplane-airport fly-airplane ?airplane?loc-to 2  is ?loc-to 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-to 2
 ?loc-to 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 2  is ?loc-to 2 at-truck-airport_m drive-truck-location-airport_m ?truck?loc-to 2
 ?city 2 location-in-city drive-truck-airport-location ?loc-to?city 2  is ?city 2 location-in-city_m drive-truck-airport-location_m ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-location-airport ?loc-to?city 2  is ?city 2 airport-in-city_m drive-truck-location-airport_m ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-airport-airport ?loc-from?city 2  is ?city 2 airport-in-city_m drive-truck-airport-airport_m ?loc-from?city 2
 ?city 2 location-in-city drive-truck-location-airport ?loc-from?city 2  is ?city 2 location-in-city_m drive-truck-location-airport_m ?loc-from?city 2
 ?city 2 airport-in-city drive-truck-airport-airport ?loc-to?city 2  is ?city 2 airport-in-city_m drive-truck-airport-airport_m ?loc-to?city 2
 ?city 2 location-in-city drive-truck-location-location ?loc-to?city 2  is ?city 2 location-in-city_m drive-truck-location-location_m ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-airport-location ?loc-from?city 2  is ?city 2 airport-in-city_m drive-truck-airport-location_m ?loc-from?city 2
 ?city 2 location-in-city drive-truck-location-location ?loc-from?city 2  is ?city 2 location-in-city_m drive-truck-location-location_m ?loc-from?city 2
 ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-from 1  is ?airplane 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-from 1
 ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-to 1  is ?airplane 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-to 1
 ?airplane 2 in-airplane unload-airplane ?pkg?airplane 2  is ?airplane 2 in-airplane_m unload-airplane_m ?pkg?airplane 2
 ?airplane 2 at-airplane-airport unload-airplane ?airplane?loc 1  is ?airplane 2 at-airplane-airport_m unload-airplane_m ?airplane?loc 1
 ?airplane 2 in-airplane load-airplane ?pkg?airplane 2  is ?airplane 2 in-airplane_m load-airplane_m ?pkg?airplane 2
 ?airplane 2 at-airplane-airport load-airplane ?airplane?loc 1  is ?airplane 2 at-airplane-airport_m load-airplane_m ?airplane?loc 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'load-truck-airport': 'load-truck-airport_m', 'unload-truck-location': 'unload-truck-location_m', 'unload-truck-airport': 'unload-truck-airport_m', 'drive-truck-location-airport': 'drive-truck-location-airport_m', 'drive-truck-location-location': 'drive-truck-location-location_m', 'drive-truck-airport-location': 'drive-truck-airport-location_m', 'load-truck-location': 'load-truck-location_m', 'drive-truck-airport-airport': 'drive-truck-airport-airport_m', 'load-airplane': 'load-airplane_m', 'unload-airplane': 'unload-airplane_m', 'fly-airplane': 'fly-airplane_m'}
###########################
###########################
Predicates mapping
{'in-truck': 'in-truck_m', 'at-truck-location': 'at-truck-location_m', 'at-truck-airport': 'at-truck-airport_m', 'at-package-location': 'at-package-location_m', 'at-package-airport': 'at-package-airport_m', 'at-airplane-airport': 'at-airplane-airport_m', 'in-airplane': 'in-airplane_m', 'airport-in-city': 'airport-in-city_m', 'location-in-city': 'location-in-city_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  80.59
planning_task_time =  0.32
total_task_time =  80.92
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between logistics-strips-typed.pddl and logistics-strips-typed_delete_operator.pddl
************************************************************
Removing the macros from  logistics-strips-typed.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
Removing the macros from  logistics-strips-typed_delete_operator.pddl
The action is not a macro load-truck-location_m
The action is not a macro load-airplane_m
The action is not a macro unload-truck-location_m
The action is not a macro unload-truck-airport_m
The action is not a macro unload-airplane_m
The action is not a macro drive-truck-location-location_m
The action is not a macro drive-truck-location-airport_m
The action is not a macro drive-truck-airport-location_m
The action is not a macro drive-truck-airport-airport_m
The action is not a macro fly-airplane_m
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.29
total_task_time =  0.29
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between logistics-strips-typed.pddl and logistics-strips-typed-M.pddl
************************************************************
Removing the macros from  logistics-strips-typed.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
Removing the macros from  logistics-strips-typed-M.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
The action is a macro load-fly-unload-airplane_m
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed-M.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?truck 2 in-truck load-truck-airport ?pkg?truck 2  is ?truck 2 in-truck load-truck-airport ?pkg?truck 2
 ?truck 2 at-truck-location unload-truck-location ?truck?loc 1  is ?truck 2 at-truck-location unload-truck-location ?truck?loc 1
 ?truck 2 at-truck-airport load-truck-airport ?truck?loc 1  is ?truck 2 at-truck-airport load-truck-airport ?truck?loc 1
 ?truck 2 in-truck unload-truck-airport ?pkg?truck 2  is ?truck 2 in-truck unload-truck-airport ?pkg?truck 2
 ?truck 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 1  is ?truck 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 1
 ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-from 1  is ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-from 1
 ?truck 2 at-truck-location drive-truck-airport-location ?truck?loc-to 1  is ?truck 2 at-truck-location drive-truck-airport-location ?truck?loc-to 1
 ?truck 2 in-truck unload-truck-location ?pkg?truck 2  is ?truck 2 in-truck unload-truck-location ?pkg?truck 2
 ?truck 2 at-truck-airport unload-truck-airport ?truck?loc 1  is ?truck 2 at-truck-airport unload-truck-airport ?truck?loc 1
 ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-to 1  is ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-to 1
 ?truck 2 at-truck-location load-truck-location ?truck?loc 1  is ?truck 2 at-truck-location load-truck-location ?truck?loc 1
 ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 1  is ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 1
 ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 1  is ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 1
 ?truck 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 1  is ?truck 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 1
 ?truck 2 at-truck-location drive-truck-location-airport ?truck?loc-from 1  is ?truck 2 at-truck-location drive-truck-location-airport ?truck?loc-from 1
 ?truck 2 in-truck load-truck-location ?pkg?truck 2  is ?truck 2 in-truck load-truck-location ?pkg?truck 2
 ?loc 2 at-package-location load-truck-location ?pkg?loc 2  is ?loc 2 at-package-location load-truck-location ?pkg?loc 2
 ?loc 2 at-truck-airport load-truck-airport ?truck?loc 2  is ?loc 2 at-truck-airport load-truck-airport ?truck?loc 2
 ?loc 2 at-package-airport load-airplane ?pkg?loc 2  is ?loc 2 at-package-airport load-airplane ?pkg?loc 2
 ?loc 2 at-truck-location unload-truck-location ?truck?loc 2  is ?loc 2 at-truck-location unload-truck-location ?truck?loc 2
 ?loc 2 at-package-airport unload-airplane ?pkg?loc 2  is ?loc 2 at-package-airport unload-airplane ?pkg?loc 2
 ?loc 2 at-airplane-airport load-airplane ?airplane?loc 2  is ?loc 2 at-airplane-airport load-airplane ?airplane?loc 2
 ?loc 2 at-package-airport unload-truck-airport ?pkg?loc 2  is ?loc 2 at-package-airport unload-truck-airport ?pkg?loc 2
 ?loc 2 at-package-airport load-truck-airport ?pkg?loc 2  is ?loc 2 at-package-airport load-truck-airport ?pkg?loc 2
 ?loc 2 at-truck-airport unload-truck-airport ?truck?loc 2  is ?loc 2 at-truck-airport unload-truck-airport ?truck?loc 2
 ?loc 2 at-package-location unload-truck-location ?pkg?loc 2  is ?loc 2 at-package-location unload-truck-location ?pkg?loc 2
 ?loc 2 at-truck-location load-truck-location ?truck?loc 2  is ?loc 2 at-truck-location load-truck-location ?truck?loc 2
 ?loc 2 at-airplane-airport unload-airplane ?airplane?loc 2  is ?loc 2 at-airplane-airport unload-airplane ?airplane?loc 2
 ?pkg 2 in-truck load-truck-location ?pkg?truck 1  is ?pkg 2 in-truck load-truck-location ?pkg?truck 1
 ?pkg 2 at-package-location unload-truck-location ?pkg?loc 1  is ?pkg 2 at-package-location unload-truck-location ?pkg?loc 1
 ?pkg 2 at-package-airport load-truck-airport ?pkg?loc 1  is ?pkg 2 at-package-airport load-truck-airport ?pkg?loc 1
 ?pkg 2 at-package-location load-truck-location ?pkg?loc 1  is ?pkg 2 at-package-location load-truck-location ?pkg?loc 1
 ?pkg 2 in-truck unload-truck-location ?pkg?truck 1  is ?pkg 2 in-truck unload-truck-location ?pkg?truck 1
 ?pkg 2 at-package-airport unload-truck-airport ?pkg?loc 1  is ?pkg 2 at-package-airport unload-truck-airport ?pkg?loc 1
 ?pkg 2 in-truck unload-truck-airport ?pkg?truck 1  is ?pkg 2 in-truck unload-truck-airport ?pkg?truck 1
 ?pkg 2 at-package-airport unload-airplane ?pkg?loc 1  is ?pkg 2 at-package-airport unload-airplane ?pkg?loc 1
 ?pkg 2 in-truck load-truck-airport ?pkg?truck 1  is ?pkg 2 in-truck load-truck-airport ?pkg?truck 1
 ?pkg 2 in-airplane load-airplane ?pkg?airplane 1  is ?pkg 2 in-airplane load-airplane ?pkg?airplane 1
 ?pkg 2 at-package-airport load-airplane ?pkg?loc 1  is ?pkg 2 at-package-airport load-airplane ?pkg?loc 1
 ?pkg 2 in-airplane unload-airplane ?pkg?airplane 1  is ?pkg 2 in-airplane unload-airplane ?pkg?airplane 1
 ?loc-from 2 airport-in-city drive-truck-airport-airport ?loc-from?city 1  is ?loc-from 2 airport-in-city drive-truck-airport-airport ?loc-from?city 1
 ?loc-from 2 location-in-city drive-truck-location-location ?loc-from?city 1  is ?loc-from 2 location-in-city drive-truck-location-location ?loc-from?city 1
 ?loc-from 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 2  is ?loc-from 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 2
 ?loc-from 2 at-truck-location drive-truck-location-airport ?truck?loc-from 2  is ?loc-from 2 at-truck-location drive-truck-location-airport ?truck?loc-from 2
 ?loc-from 2 location-in-city drive-truck-location-airport ?loc-from?city 1  is ?loc-from 2 location-in-city drive-truck-location-airport ?loc-from?city 1
 ?loc-from 2 at-airplane-airport fly-airplane ?airplane?loc-from 2  is ?loc-from 2 at-airplane-airport fly-airplane ?airplane?loc-from 2
 ?loc-from 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 2  is ?loc-from 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 2
 ?loc-from 2 airport-in-city drive-truck-airport-location ?loc-from?city 1  is ?loc-from 2 airport-in-city drive-truck-airport-location ?loc-from?city 1
 ?loc-from 2 at-truck-location drive-truck-location-location ?truck?loc-from 2  is ?loc-from 2 at-truck-location drive-truck-location-location ?truck?loc-from 2
 ?loc-to 2 location-in-city drive-truck-location-location ?loc-to?city 1  is ?loc-to 2 location-in-city drive-truck-location-location ?loc-to?city 1
 ?loc-to 2 airport-in-city drive-truck-location-airport ?loc-to?city 1  is ?loc-to 2 airport-in-city drive-truck-location-airport ?loc-to?city 1
 ?loc-to 2 location-in-city drive-truck-airport-location ?loc-to?city 1  is ?loc-to 2 location-in-city drive-truck-airport-location ?loc-to?city 1
 ?loc-to 2 airport-in-city drive-truck-airport-airport ?loc-to?city 1  is ?loc-to 2 airport-in-city drive-truck-airport-airport ?loc-to?city 1
 ?loc-to 2 at-truck-location drive-truck-airport-location ?truck?loc-to 2  is ?loc-to 2 at-truck-location drive-truck-airport-location ?truck?loc-to 2
 ?loc-to 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 2  is ?loc-to 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 2
 ?loc-to 2 at-truck-location drive-truck-location-location ?truck?loc-to 2  is ?loc-to 2 at-truck-location drive-truck-location-location ?truck?loc-to 2
 ?loc-to 2 at-airplane-airport fly-airplane ?airplane?loc-to 2  is ?loc-to 2 at-airplane-airport fly-airplane ?airplane?loc-to 2
 ?loc-to 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 2  is ?loc-to 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 2
 ?city 2 location-in-city drive-truck-airport-location ?loc-to?city 2  is ?city 2 location-in-city drive-truck-airport-location ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-location-airport ?loc-to?city 2  is ?city 2 airport-in-city drive-truck-location-airport ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-airport-airport ?loc-from?city 2  is ?city 2 airport-in-city drive-truck-airport-airport ?loc-from?city 2
 ?city 2 location-in-city drive-truck-location-airport ?loc-from?city 2  is ?city 2 location-in-city drive-truck-location-airport ?loc-from?city 2
 ?city 2 airport-in-city drive-truck-airport-airport ?loc-to?city 2  is ?city 2 airport-in-city drive-truck-airport-airport ?loc-to?city 2
 ?city 2 location-in-city drive-truck-location-location ?loc-to?city 2  is ?city 2 location-in-city drive-truck-location-location ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-airport-location ?loc-from?city 2  is ?city 2 airport-in-city drive-truck-airport-location ?loc-from?city 2
 ?city 2 location-in-city drive-truck-location-location ?loc-from?city 2  is ?city 2 location-in-city drive-truck-location-location ?loc-from?city 2
 ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-from 1  is ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-from 1
 ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-to 1  is ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-to 1
 ?airplane 2 in-airplane unload-airplane ?pkg?airplane 2  is ?airplane 2 in-airplane unload-airplane ?pkg?airplane 2
 ?airplane 2 at-airplane-airport unload-airplane ?airplane?loc 1  is ?airplane 2 at-airplane-airport unload-airplane ?airplane?loc 1
 ?airplane 2 in-airplane load-airplane ?pkg?airplane 2  is ?airplane 2 in-airplane load-airplane ?pkg?airplane 2
 ?airplane 2 at-airplane-airport load-airplane ?airplane?loc 1  is ?airplane 2 at-airplane-airport load-airplane ?airplane?loc 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'load-truck-airport': 'load-truck-airport', 'unload-truck-location': 'unload-truck-location', 'unload-truck-airport': 'unload-truck-airport', 'drive-truck-location-airport': 'drive-truck-location-airport', 'drive-truck-location-location': 'drive-truck-location-location', 'drive-truck-airport-location': 'drive-truck-airport-location', 'load-truck-location': 'load-truck-location', 'drive-truck-airport-airport': 'drive-truck-airport-airport', 'load-airplane': 'load-airplane', 'unload-airplane': 'unload-airplane', 'fly-airplane': 'fly-airplane'}
###########################
###########################
Predicates mapping
{'in-truck': 'in-truck', 'at-truck-location': 'at-truck-location', 'at-truck-airport': 'at-truck-airport', 'at-package-location': 'at-package-location', 'at-package-airport': 'at-package-airport', 'at-airplane-airport': 'at-airplane-airport', 'in-airplane': 'in-airplane', 'airport-in-city': 'airport-in-city', 'location-in-city': 'location-in-city'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  91.0
planning_task_time =  0.33
total_task_time =  91.33
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between logistics-strips-typed.pddl and logistics-strips-typed_invalid_macro.pddl
************************************************************
Removing the macros from  logistics-strips-typed.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
Removing the macros from  logistics-strips-typed_invalid_macro.pddl
The action is not a macro load-truck-location_m
The action is not a macro load-truck-airport_m
The action is not a macro load-airplane_m
The action is not a macro unload-truck-location_m
The action is not a macro unload-truck-airport_m
The action is not a macro unload-airplane_m
The action is not a macro drive-truck-location-location_m
The action is not a macro drive-truck-location-airport_m
The action is not a macro drive-truck-airport-location_m
The action is not a macro drive-truck-airport-airport_m
The action is not a macro fly-airplane_m
The action is a macro load-truck-location-load-truck-airport-load-airplane_m
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed_invalid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?truck 2 in-truck load-truck-airport ?pkg?truck 2  is ?truck 2 in-truck_m load-truck-airport_m ?pkg?truck 2
 ?truck 2 at-truck-location unload-truck-location ?truck?loc 1  is ?truck 2 at-truck-location_m unload-truck-location_m ?truck?loc 1
 ?truck 2 at-truck-airport load-truck-airport ?truck?loc 1  is ?truck 2 at-truck-airport_m load-truck-airport_m ?truck?loc 1
 ?truck 2 in-truck unload-truck-airport ?pkg?truck 2  is ?truck 2 in-truck_m unload-truck-airport_m ?pkg?truck 2
 ?truck 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 1  is ?truck 2 at-truck-airport_m drive-truck-location-airport_m ?truck?loc-to 1
 ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-from 1  is ?truck 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-from 1
 ?truck 2 at-truck-location drive-truck-airport-location ?truck?loc-to 1  is ?truck 2 at-truck-location_m drive-truck-airport-location_m ?truck?loc-to 1
 ?truck 2 in-truck unload-truck-location ?pkg?truck 2  is ?truck 2 in-truck_m unload-truck-location_m ?pkg?truck 2
 ?truck 2 at-truck-airport unload-truck-airport ?truck?loc 1  is ?truck 2 at-truck-airport_m unload-truck-airport_m ?truck?loc 1
 ?truck 2 at-truck-location drive-truck-location-location ?truck?loc-to 1  is ?truck 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-to 1
 ?truck 2 at-truck-location load-truck-location ?truck?loc 1  is ?truck 2 at-truck-location_m load-truck-location_m ?truck?loc 1
 ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 1  is ?truck 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-from 1
 ?truck 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 1  is ?truck 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-to 1
 ?truck 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 1  is ?truck 2 at-truck-airport_m drive-truck-airport-location_m ?truck?loc-from 1
 ?truck 2 at-truck-location drive-truck-location-airport ?truck?loc-from 1  is ?truck 2 at-truck-location_m drive-truck-location-airport_m ?truck?loc-from 1
 ?truck 2 in-truck load-truck-location ?pkg?truck 2  is ?truck 2 in-truck_m load-truck-location_m ?pkg?truck 2
 ?loc 2 at-package-location load-truck-location ?pkg?loc 2  is ?loc 2 at-package-location_m load-truck-location_m ?pkg?loc 2
 ?loc 2 at-truck-airport load-truck-airport ?truck?loc 2  is ?loc 2 at-truck-airport_m load-truck-airport_m ?truck?loc 2
 ?loc 2 at-package-airport load-airplane ?pkg?loc 2  is ?loc 2 at-package-airport_m load-airplane_m ?pkg?loc 2
 ?loc 2 at-truck-location unload-truck-location ?truck?loc 2  is ?loc 2 at-truck-location_m unload-truck-location_m ?truck?loc 2
 ?loc 2 at-package-airport unload-airplane ?pkg?loc 2  is ?loc 2 at-package-airport_m unload-airplane_m ?pkg?loc 2
 ?loc 2 at-airplane-airport load-airplane ?airplane?loc 2  is ?loc 2 at-airplane-airport_m load-airplane_m ?airplane?loc 2
 ?loc 2 at-package-airport unload-truck-airport ?pkg?loc 2  is ?loc 2 at-package-airport_m unload-truck-airport_m ?pkg?loc 2
 ?loc 2 at-package-airport load-truck-airport ?pkg?loc 2  is ?loc 2 at-package-airport_m load-truck-airport_m ?pkg?loc 2
 ?loc 2 at-truck-airport unload-truck-airport ?truck?loc 2  is ?loc 2 at-truck-airport_m unload-truck-airport_m ?truck?loc 2
 ?loc 2 at-package-location unload-truck-location ?pkg?loc 2  is ?loc 2 at-package-location_m unload-truck-location_m ?pkg?loc 2
 ?loc 2 at-truck-location load-truck-location ?truck?loc 2  is ?loc 2 at-truck-location_m load-truck-location_m ?truck?loc 2
 ?loc 2 at-airplane-airport unload-airplane ?airplane?loc 2  is ?loc 2 at-airplane-airport_m unload-airplane_m ?airplane?loc 2
 ?pkg 2 in-truck load-truck-location ?pkg?truck 1  is ?pkg 2 in-truck_m load-truck-location_m ?pkg?truck 1
 ?pkg 2 at-package-location unload-truck-location ?pkg?loc 1  is ?pkg 2 at-package-location_m unload-truck-location_m ?pkg?loc 1
 ?pkg 2 at-package-airport load-truck-airport ?pkg?loc 1  is ?pkg 2 at-package-airport_m load-truck-airport_m ?pkg?loc 1
 ?pkg 2 at-package-location load-truck-location ?pkg?loc 1  is ?pkg 2 at-package-location_m load-truck-location_m ?pkg?loc 1
 ?pkg 2 in-truck unload-truck-location ?pkg?truck 1  is ?pkg 2 in-truck_m unload-truck-location_m ?pkg?truck 1
 ?pkg 2 at-package-airport unload-truck-airport ?pkg?loc 1  is ?pkg 2 at-package-airport_m unload-truck-airport_m ?pkg?loc 1
 ?pkg 2 in-truck unload-truck-airport ?pkg?truck 1  is ?pkg 2 in-truck_m unload-truck-airport_m ?pkg?truck 1
 ?pkg 2 at-package-airport unload-airplane ?pkg?loc 1  is ?pkg 2 at-package-airport_m unload-airplane_m ?pkg?loc 1
 ?pkg 2 in-truck load-truck-airport ?pkg?truck 1  is ?pkg 2 in-truck_m load-truck-airport_m ?pkg?truck 1
 ?pkg 2 in-airplane load-airplane ?pkg?airplane 1  is ?pkg 2 in-airplane_m load-airplane_m ?pkg?airplane 1
 ?pkg 2 at-package-airport load-airplane ?pkg?loc 1  is ?pkg 2 at-package-airport_m load-airplane_m ?pkg?loc 1
 ?pkg 2 in-airplane unload-airplane ?pkg?airplane 1  is ?pkg 2 in-airplane_m unload-airplane_m ?pkg?airplane 1
 ?loc-from 2 airport-in-city drive-truck-airport-airport ?loc-from?city 1  is ?loc-from 2 airport-in-city_m drive-truck-airport-airport_m ?loc-from?city 1
 ?loc-from 2 location-in-city drive-truck-location-location ?loc-from?city 1  is ?loc-from 2 location-in-city_m drive-truck-location-location_m ?loc-from?city 1
 ?loc-from 2 at-truck-airport drive-truck-airport-location ?truck?loc-from 2  is ?loc-from 2 at-truck-airport_m drive-truck-airport-location_m ?truck?loc-from 2
 ?loc-from 2 at-truck-location drive-truck-location-airport ?truck?loc-from 2  is ?loc-from 2 at-truck-location_m drive-truck-location-airport_m ?truck?loc-from 2
 ?loc-from 2 location-in-city drive-truck-location-airport ?loc-from?city 1  is ?loc-from 2 location-in-city_m drive-truck-location-airport_m ?loc-from?city 1
 ?loc-from 2 at-airplane-airport fly-airplane ?airplane?loc-from 2  is ?loc-from 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-from 2
 ?loc-from 2 at-truck-airport drive-truck-airport-airport ?truck?loc-from 2  is ?loc-from 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-from 2
 ?loc-from 2 airport-in-city drive-truck-airport-location ?loc-from?city 1  is ?loc-from 2 airport-in-city_m drive-truck-airport-location_m ?loc-from?city 1
 ?loc-from 2 at-truck-location drive-truck-location-location ?truck?loc-from 2  is ?loc-from 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-from 2
 ?loc-to 2 location-in-city drive-truck-location-location ?loc-to?city 1  is ?loc-to 2 location-in-city_m drive-truck-location-location_m ?loc-to?city 1
 ?loc-to 2 airport-in-city drive-truck-location-airport ?loc-to?city 1  is ?loc-to 2 airport-in-city_m drive-truck-location-airport_m ?loc-to?city 1
 ?loc-to 2 location-in-city drive-truck-airport-location ?loc-to?city 1  is ?loc-to 2 location-in-city_m drive-truck-airport-location_m ?loc-to?city 1
 ?loc-to 2 airport-in-city drive-truck-airport-airport ?loc-to?city 1  is ?loc-to 2 airport-in-city_m drive-truck-airport-airport_m ?loc-to?city 1
 ?loc-to 2 at-truck-location drive-truck-airport-location ?truck?loc-to 2  is ?loc-to 2 at-truck-location_m drive-truck-airport-location_m ?truck?loc-to 2
 ?loc-to 2 at-truck-airport drive-truck-airport-airport ?truck?loc-to 2  is ?loc-to 2 at-truck-airport_m drive-truck-airport-airport_m ?truck?loc-to 2
 ?loc-to 2 at-truck-location drive-truck-location-location ?truck?loc-to 2  is ?loc-to 2 at-truck-location_m drive-truck-location-location_m ?truck?loc-to 2
 ?loc-to 2 at-airplane-airport fly-airplane ?airplane?loc-to 2  is ?loc-to 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-to 2
 ?loc-to 2 at-truck-airport drive-truck-location-airport ?truck?loc-to 2  is ?loc-to 2 at-truck-airport_m drive-truck-location-airport_m ?truck?loc-to 2
 ?city 2 location-in-city drive-truck-airport-location ?loc-to?city 2  is ?city 2 location-in-city_m drive-truck-airport-location_m ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-location-airport ?loc-to?city 2  is ?city 2 airport-in-city_m drive-truck-location-airport_m ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-airport-airport ?loc-from?city 2  is ?city 2 airport-in-city_m drive-truck-airport-airport_m ?loc-from?city 2
 ?city 2 location-in-city drive-truck-location-airport ?loc-from?city 2  is ?city 2 location-in-city_m drive-truck-location-airport_m ?loc-from?city 2
 ?city 2 airport-in-city drive-truck-airport-airport ?loc-to?city 2  is ?city 2 airport-in-city_m drive-truck-airport-airport_m ?loc-to?city 2
 ?city 2 location-in-city drive-truck-location-location ?loc-to?city 2  is ?city 2 location-in-city_m drive-truck-location-location_m ?loc-to?city 2
 ?city 2 airport-in-city drive-truck-airport-location ?loc-from?city 2  is ?city 2 airport-in-city_m drive-truck-airport-location_m ?loc-from?city 2
 ?city 2 location-in-city drive-truck-location-location ?loc-from?city 2  is ?city 2 location-in-city_m drive-truck-location-location_m ?loc-from?city 2
 ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-from 1  is ?airplane 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-from 1
 ?airplane 2 at-airplane-airport fly-airplane ?airplane?loc-to 1  is ?airplane 2 at-airplane-airport_m fly-airplane_m ?airplane?loc-to 1
 ?airplane 2 in-airplane unload-airplane ?pkg?airplane 2  is ?airplane 2 in-airplane_m unload-airplane_m ?pkg?airplane 2
 ?airplane 2 at-airplane-airport unload-airplane ?airplane?loc 1  is ?airplane 2 at-airplane-airport_m unload-airplane_m ?airplane?loc 1
 ?airplane 2 in-airplane load-airplane ?pkg?airplane 2  is ?airplane 2 in-airplane_m load-airplane_m ?pkg?airplane 2
 ?airplane 2 at-airplane-airport load-airplane ?airplane?loc 1  is ?airplane 2 at-airplane-airport_m load-airplane_m ?airplane?loc 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'load-truck-airport': 'load-truck-airport_m', 'unload-truck-location': 'unload-truck-location_m', 'unload-truck-airport': 'unload-truck-airport_m', 'drive-truck-location-airport': 'drive-truck-location-airport_m', 'drive-truck-location-location': 'drive-truck-location-location_m', 'drive-truck-airport-location': 'drive-truck-airport-location_m', 'load-truck-location': 'load-truck-location_m', 'drive-truck-airport-airport': 'drive-truck-airport-airport_m', 'load-airplane': 'load-airplane_m', 'unload-airplane': 'unload-airplane_m', 'fly-airplane': 'fly-airplane_m'}
###########################
###########################
Predicates mapping
{'in-truck': 'in-truck_m', 'at-truck-location': 'at-truck-location_m', 'at-truck-airport': 'at-truck-airport_m', 'at-package-location': 'at-package-location_m', 'at-package-airport': 'at-package-airport_m', 'at-airplane-airport': 'at-airplane-airport_m', 'in-airplane': 'in-airplane_m', 'airport-in-city': 'airport-in-city_m', 'location-in-city': 'location-in-city_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  86.3
planning_task_time =  0.29
total_task_time =  86.6
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between logistics-strips-typed.pddl and logistics-strips-typed_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  logistics-strips-typed.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
Removing the macros from  logistics-strips-typed_swapped_two_variables_in_atom.pddl
The action is not a macro load-truck-location_m
The action is not a macro load-truck-airport_m
The action is not a macro load-airplane_m
The action is not a macro unload-truck-location_m
The action is not a macro unload-truck-airport_m
The action is not a macro unload-airplane_m
The action is not a macro drive-truck-location-location_m
The action is not a macro drive-truck-location-airport_m
The action is not a macro drive-truck-airport-location_m
The action is not a macro drive-truck-airport-airport_m
The action is not a macro fly-airplane_m
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed_swapped_two_variables_in_atom.pddl
Domain2 is potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because one of them is potentially redundant but not the other!
Only one domain is potentially redundant.
Only one domain is potentially redundant.
SMT_task_time =  0
planning_task_time =  0.3
total_task_time =  0.3
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between logistics-strips-typed.pddl and logistics-strips-typed_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  logistics-strips-typed.pddl
The action is not a macro load-truck-location
The action is not a macro load-truck-airport
The action is not a macro load-airplane
The action is not a macro unload-truck-location
The action is not a macro unload-truck-airport
The action is not a macro unload-airplane
The action is not a macro drive-truck-location-location
The action is not a macro drive-truck-location-airport
The action is not a macro drive-truck-airport-location
The action is not a macro drive-truck-airport-airport
The action is not a macro fly-airplane
Removing the macros from  logistics-strips-typed_swapped_two_atoms_between_two_parts.pddl
The action is not a macro load-truck-location_m
The action is not a macro load-truck-airport_m
The action is not a macro load-airplane_m
The action is not a macro unload-truck-location_m
The action is not a macro unload-truck-airport_m
The action is not a macro unload-airplane_m
The action is not a macro drive-truck-location-location_m
The action is not a macro drive-truck-location-airport_m
The action is not a macro drive-truck-airport-location_m
The action is not a macro drive-truck-airport-airport_m
The action is not a macro fly-airplane_m
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain logistics-strips-typed_swapped_two_atoms_between_two_parts.pddl
Domain2 is potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because one of them is potentially redundant but not the other!
Only one domain is potentially redundant.
Only one domain is potentially redundant.
SMT_task_time =  0
planning_task_time =  0.3
total_task_time =  0.3
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between parking-sequential-satisficing.pddl and parking-sequential-satisficing_delete_operator.pddl
************************************************************
Removing the macros from  parking-sequential-satisficing.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
Removing the macros from  parking-sequential-satisficing_delete_operator.pddl
The action is not a macro move-curb-to-curb_m
The action is not a macro move-curb-to-car_m
The action is not a macro move-car-to-curb_m
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.09
total_task_time =  0.09
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between parking-sequential-satisficing.pddl and parking-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  parking-sequential-satisficing.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
Removing the macros from  parking-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
The action is not a macro move-curb-to-curb_m
The action is not a macro move-curb-to-car_m
The action is not a macro move-car-to-curb_m
The action is not a macro move-car-to-car_m
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'move-curb-to-curb': [], 'move-curb-to-car': ['move-curb-to-car_m'], 'move-car-to-curb': ['move-car-to-curb_m'], 'move-car-to-car': ['move-car-to-car_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.11
total_task_time =  0.11
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between parking-sequential-satisficing.pddl and parking-sequential-satisficing-M.pddl
************************************************************
Removing the macros from  parking-sequential-satisficing.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
Removing the macros from  parking-sequential-satisficing-M.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
The action is a macro move-car-to-curb-move-car-to-car
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing-M.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?car 1 car-clear move-car-to-car ?car 1   is ?car 1 car-clear move-car-to-car ?car 1
 ?car 2 behind-car move-car-to-curb ?car?carsrc 1  is ?car 2 behind-car move-car-to-curb ?car?carsrc 1
 ?car 1 car-clear move-car-to-curb ?car 1  is ?car 1 car-clear move-car-to-curb ?car 1
 ?car 2 behind-car move-car-to-car ?car?carsrc 1  is ?car 2 behind-car move-car-to-car ?car?carsrc 1
 ?car 2 at-curb-num move-curb-to-curb ?car?curbdest 1  is ?car 2 at-curb-num move-curb-to-curb ?car?curbdest 1
 ?car 2 at-curb-num move-curb-to-car ?car?curbsrc 1  is ?car 2 at-curb-num move-curb-to-car ?car?curbsrc 1
 ?car 1 car-clear move-curb-to-car ?car 1  is ?car 1 car-clear move-curb-to-car ?car 1
 ?car 1 at-curb move-curb-to-car ?car 1    is ?car 1 at-curb move-curb-to-car ?car 1
 ?car 2 at-curb-num move-car-to-curb ?car?curbdest 1  is ?car 2 at-curb-num move-car-to-curb ?car?curbdest 1
 ?car 1 at-curb move-car-to-curb ?car 1    is ?car 1 at-curb move-car-to-curb ?car 1
 ?car 2 behind-car move-car-to-car ?car?cardest 1  is ?car 2 behind-car move-car-to-car ?car?cardest 1
 ?car 1 car-clear move-curb-to-curb ?car 1  is ?car 1 car-clear move-curb-to-curb ?car 1
 ?car 2 behind-car move-curb-to-car ?car?cardest 1  is ?car 2 behind-car move-curb-to-car ?car?cardest 1
 ?car 2 at-curb-num move-curb-to-curb ?car?curbsrc 1  is ?car 2 at-curb-num move-curb-to-curb ?car?curbsrc 1
 ?cardest 1 car-clear move-car-to-car ?cardest 1  is ?cardest 1 car-clear move-car-to-car ?cardest 1
 ?cardest 1 at-curb move-car-to-car ?cardest 1  is ?cardest 1 at-curb move-car-to-car ?cardest 1
 ?cardest 1 at-curb move-curb-to-car ?cardest 1  is ?cardest 1 at-curb move-curb-to-car ?cardest 1
 ?cardest 2 behind-car move-curb-to-car ?car?cardest 2  is ?cardest 2 behind-car move-curb-to-car ?car?cardest 2
 ?cardest 2 behind-car move-car-to-car ?car?cardest 2  is ?cardest 2 behind-car move-car-to-car ?car?cardest 2
 ?cardest 1 car-clear move-curb-to-car ?cardest 1  is ?cardest 1 car-clear move-curb-to-car ?cardest 1
 ?carsrc 1 car-clear move-car-to-car ?carsrc 1  is ?carsrc 1 car-clear move-car-to-car ?carsrc 1
 ?carsrc 2 behind-car move-car-to-car ?car?carsrc 2  is ?carsrc 2 behind-car move-car-to-car ?car?carsrc 2
 ?carsrc 2 behind-car move-car-to-curb ?car?carsrc 2  is ?carsrc 2 behind-car move-car-to-curb ?car?carsrc 2
 ?carsrc 1 car-clear move-car-to-curb ?carsrc 1  is ?carsrc 1 car-clear move-car-to-curb ?carsrc 1
 ?curbdest 2 at-curb-num move-curb-to-curb ?car?curbdest 2  is ?curbdest 2 at-curb-num move-curb-to-curb ?car?curbdest 2
 ?curbdest 1 curb-clear move-curb-to-curb ?curbdest 1  is ?curbdest 1 curb-clear move-curb-to-curb ?curbdest 1
 ?curbdest 1 curb-clear move-car-to-curb ?curbdest 1  is ?curbdest 1 curb-clear move-car-to-curb ?curbdest 1
 ?curbdest 2 at-curb-num move-car-to-curb ?car?curbdest 2  is ?curbdest 2 at-curb-num move-car-to-curb ?car?curbdest 2
 ?curbsrc 2 at-curb-num move-curb-to-curb ?car?curbsrc 2  is ?curbsrc 2 at-curb-num move-curb-to-curb ?car?curbsrc 2
 ?curbsrc 2 at-curb-num move-curb-to-car ?car?curbsrc 2  is ?curbsrc 2 at-curb-num move-curb-to-car ?car?curbsrc 2
 ?curbsrc 1 curb-clear move-curb-to-car ?curbsrc 1  is ?curbsrc 1 curb-clear move-curb-to-car ?curbsrc 1
 ?curbsrc 1 curb-clear move-curb-to-curb ?curbsrc 1  is ?curbsrc 1 curb-clear move-curb-to-curb ?curbsrc 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'move-car-to-car': 'move-car-to-car', 'move-car-to-curb': 'move-car-to-curb', 'move-curb-to-curb': 'move-curb-to-curb', 'move-curb-to-car': 'move-curb-to-car'}
###########################
###########################
Predicates mapping
{'car-clear': 'car-clear', 'behind-car': 'behind-car', 'at-curb-num': 'at-curb-num', 'at-curb': 'at-curb', 'curb-clear': 'curb-clear'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  0.51
planning_task_time =  0.11
total_task_time =  0.62
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between parking-sequential-satisficing.pddl and parking-sequential-satisficing_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  parking-sequential-satisficing.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
Removing the macros from  parking-sequential-satisficing_swapped_two_variables_in_atom.pddl
The action is not a macro move-curb-to-curb_m
The action is not a macro move-curb-to-car_m
The action is not a macro move-car-to-curb_m
The action is not a macro move-car-to-car_m
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing_swapped_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'move-curb-to-curb': [], 'move-curb-to-car': ['move-curb-to-car_m'], 'move-car-to-curb': ['move-car-to-curb_m'], 'move-car-to-car': []}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.09
total_task_time =  0.09
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between parking-sequential-satisficing.pddl and parking-sequential-satisficing_invalid_macro.pddl
************************************************************
Removing the macros from  parking-sequential-satisficing.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
Removing the macros from  parking-sequential-satisficing_invalid_macro.pddl
The action is not a macro move-curb-to-curb_m
The action is not a macro move-curb-to-car_m
The action is not a macro move-car-to-curb_m
The action is not a macro move-car-to-car_m
The action is a macro move-curb-to-curb-move-curb-to-car-move-car-to-curb_m
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing_invalid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?car 1 car-clear move-car-to-car ?car 1   is ?car 1 car-clear_m move-car-to-car_m ?car 1
 ?car 2 behind-car move-car-to-curb ?car?carsrc 1  is ?car 2 behind-car_m move-car-to-curb_m ?car?carsrc 1
 ?car 1 car-clear move-car-to-curb ?car 1  is ?car 1 car-clear_m move-car-to-curb_m ?car 1
 ?car 2 behind-car move-car-to-car ?car?carsrc 1  is ?car 2 behind-car_m move-car-to-car_m ?car?carsrc 1
 ?car 2 at-curb-num move-curb-to-curb ?car?curbdest 1  is ?car 2 at-curb-num_m move-curb-to-curb_m ?car?curbdest 1
 ?car 2 at-curb-num move-curb-to-car ?car?curbsrc 1  is ?car 2 at-curb-num_m move-curb-to-car_m ?car?curbsrc 1
 ?car 1 car-clear move-curb-to-car ?car 1  is ?car 1 car-clear_m move-curb-to-car_m ?car 1
 ?car 1 at-curb move-curb-to-car ?car 1    is ?car 1 at-curb_m move-curb-to-car_m ?car 1
 ?car 2 at-curb-num move-car-to-curb ?car?curbdest 1  is ?car 2 at-curb-num_m move-car-to-curb_m ?car?curbdest 1
 ?car 1 at-curb move-car-to-curb ?car 1    is ?car 1 at-curb_m move-car-to-curb_m ?car 1
 ?car 2 behind-car move-car-to-car ?car?cardest 1  is ?car 2 behind-car_m move-car-to-car_m ?car?cardest 1
 ?car 1 car-clear move-curb-to-curb ?car 1  is ?car 1 car-clear_m move-curb-to-curb_m ?car 1
 ?car 2 behind-car move-curb-to-car ?car?cardest 1  is ?car 2 behind-car_m move-curb-to-car_m ?car?cardest 1
 ?car 2 at-curb-num move-curb-to-curb ?car?curbsrc 1  is ?car 2 at-curb-num_m move-curb-to-curb_m ?car?curbsrc 1
 ?cardest 1 car-clear move-car-to-car ?cardest 1  is ?cardest 1 car-clear_m move-car-to-car_m ?cardest 1
 ?cardest 1 at-curb move-car-to-car ?cardest 1  is ?cardest 1 at-curb_m move-car-to-car_m ?cardest 1
 ?cardest 1 at-curb move-curb-to-car ?cardest 1  is ?cardest 1 at-curb_m move-curb-to-car_m ?cardest 1
 ?cardest 2 behind-car move-curb-to-car ?car?cardest 2  is ?cardest 2 behind-car_m move-curb-to-car_m ?car?cardest 2
 ?cardest 2 behind-car move-car-to-car ?car?cardest 2  is ?cardest 2 behind-car_m move-car-to-car_m ?car?cardest 2
 ?cardest 1 car-clear move-curb-to-car ?cardest 1  is ?cardest 1 car-clear_m move-curb-to-car_m ?cardest 1
 ?carsrc 1 car-clear move-car-to-car ?carsrc 1  is ?carsrc 1 car-clear_m move-car-to-car_m ?carsrc 1
 ?carsrc 2 behind-car move-car-to-car ?car?carsrc 2  is ?carsrc 2 behind-car_m move-car-to-car_m ?car?carsrc 2
 ?carsrc 2 behind-car move-car-to-curb ?car?carsrc 2  is ?carsrc 2 behind-car_m move-car-to-curb_m ?car?carsrc 2
 ?carsrc 1 car-clear move-car-to-curb ?carsrc 1  is ?carsrc 1 car-clear_m move-car-to-curb_m ?carsrc 1
 ?curbdest 2 at-curb-num move-curb-to-curb ?car?curbdest 2  is ?curbdest 2 at-curb-num_m move-curb-to-curb_m ?car?curbdest 2
 ?curbdest 1 curb-clear move-curb-to-curb ?curbdest 1  is ?curbdest 1 curb-clear_m move-curb-to-curb_m ?curbdest 1
 ?curbdest 1 curb-clear move-car-to-curb ?curbdest 1  is ?curbdest 1 curb-clear_m move-car-to-curb_m ?curbdest 1
 ?curbdest 2 at-curb-num move-car-to-curb ?car?curbdest 2  is ?curbdest 2 at-curb-num_m move-car-to-curb_m ?car?curbdest 2
 ?curbsrc 2 at-curb-num move-curb-to-curb ?car?curbsrc 2  is ?curbsrc 2 at-curb-num_m move-curb-to-curb_m ?car?curbsrc 2
 ?curbsrc 2 at-curb-num move-curb-to-car ?car?curbsrc 2  is ?curbsrc 2 at-curb-num_m move-curb-to-car_m ?car?curbsrc 2
 ?curbsrc 1 curb-clear move-curb-to-car ?curbsrc 1  is ?curbsrc 1 curb-clear_m move-curb-to-car_m ?curbsrc 1
 ?curbsrc 1 curb-clear move-curb-to-curb ?curbsrc 1  is ?curbsrc 1 curb-clear_m move-curb-to-curb_m ?curbsrc 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'move-car-to-car': 'move-car-to-car_m', 'move-car-to-curb': 'move-car-to-curb_m', 'move-curb-to-curb': 'move-curb-to-curb_m', 'move-curb-to-car': 'move-curb-to-car_m'}
###########################
###########################
Predicates mapping
{'car-clear': 'car-clear_m', 'behind-car': 'behind-car_m', 'at-curb-num': 'at-curb-num_m', 'at-curb': 'at-curb_m', 'curb-clear': 'curb-clear_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  0.56
planning_task_time =  0.11
total_task_time =  0.67
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between parking-sequential-satisficing.pddl and parking-sequential-satisficing_valid_macro.pddl
************************************************************
Removing the macros from  parking-sequential-satisficing.pddl
The action is not a macro move-curb-to-curb
The action is not a macro move-curb-to-car
The action is not a macro move-car-to-curb
The action is not a macro move-car-to-car
Removing the macros from  parking-sequential-satisficing_valid_macro.pddl
The action is not a macro move-curb-to-curb_m
The action is not a macro move-curb-to-car_m
The action is not a macro move-car-to-curb_m
The action is not a macro move-car-to-car_m
The action is a macro move-curb-to-curb-move-curb-to-car-move-car-to-curb_m
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain parking-sequential-satisficing_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?car 1 car-clear move-car-to-car ?car 1   is ?car 1 car-clear_m move-car-to-car_m ?car 1
 ?car 2 behind-car move-car-to-curb ?car?carsrc 1  is ?car 2 behind-car_m move-car-to-curb_m ?car?carsrc 1
 ?car 1 car-clear move-car-to-curb ?car 1  is ?car 1 car-clear_m move-car-to-curb_m ?car 1
 ?car 2 behind-car move-car-to-car ?car?carsrc 1  is ?car 2 behind-car_m move-car-to-car_m ?car?carsrc 1
 ?car 2 at-curb-num move-curb-to-curb ?car?curbdest 1  is ?car 2 at-curb-num_m move-curb-to-curb_m ?car?curbdest 1
 ?car 2 at-curb-num move-curb-to-car ?car?curbsrc 1  is ?car 2 at-curb-num_m move-curb-to-car_m ?car?curbsrc 1
 ?car 1 car-clear move-curb-to-car ?car 1  is ?car 1 car-clear_m move-curb-to-car_m ?car 1
 ?car 1 at-curb move-curb-to-car ?car 1    is ?car 1 at-curb_m move-curb-to-car_m ?car 1
 ?car 2 at-curb-num move-car-to-curb ?car?curbdest 1  is ?car 2 at-curb-num_m move-car-to-curb_m ?car?curbdest 1
 ?car 1 at-curb move-car-to-curb ?car 1    is ?car 1 at-curb_m move-car-to-curb_m ?car 1
 ?car 2 behind-car move-car-to-car ?car?cardest 1  is ?car 2 behind-car_m move-car-to-car_m ?car?cardest 1
 ?car 1 car-clear move-curb-to-curb ?car 1  is ?car 1 car-clear_m move-curb-to-curb_m ?car 1
 ?car 2 behind-car move-curb-to-car ?car?cardest 1  is ?car 2 behind-car_m move-curb-to-car_m ?car?cardest 1
 ?car 2 at-curb-num move-curb-to-curb ?car?curbsrc 1  is ?car 2 at-curb-num_m move-curb-to-curb_m ?car?curbsrc 1
 ?cardest 1 car-clear move-car-to-car ?cardest 1  is ?cardest 1 car-clear_m move-car-to-car_m ?cardest 1
 ?cardest 1 at-curb move-car-to-car ?cardest 1  is ?cardest 1 at-curb_m move-car-to-car_m ?cardest 1
 ?cardest 1 at-curb move-curb-to-car ?cardest 1  is ?cardest 1 at-curb_m move-curb-to-car_m ?cardest 1
 ?cardest 2 behind-car move-curb-to-car ?car?cardest 2  is ?cardest 2 behind-car_m move-curb-to-car_m ?car?cardest 2
 ?cardest 2 behind-car move-car-to-car ?car?cardest 2  is ?cardest 2 behind-car_m move-car-to-car_m ?car?cardest 2
 ?cardest 1 car-clear move-curb-to-car ?cardest 1  is ?cardest 1 car-clear_m move-curb-to-car_m ?cardest 1
 ?carsrc 1 car-clear move-car-to-car ?carsrc 1  is ?carsrc 1 car-clear_m move-car-to-car_m ?carsrc 1
 ?carsrc 2 behind-car move-car-to-car ?car?carsrc 2  is ?carsrc 2 behind-car_m move-car-to-car_m ?car?carsrc 2
 ?carsrc 2 behind-car move-car-to-curb ?car?carsrc 2  is ?carsrc 2 behind-car_m move-car-to-curb_m ?car?carsrc 2
 ?carsrc 1 car-clear move-car-to-curb ?carsrc 1  is ?carsrc 1 car-clear_m move-car-to-curb_m ?carsrc 1
 ?curbdest 2 at-curb-num move-curb-to-curb ?car?curbdest 2  is ?curbdest 2 at-curb-num_m move-curb-to-curb_m ?car?curbdest 2
 ?curbdest 1 curb-clear move-curb-to-curb ?curbdest 1  is ?curbdest 1 curb-clear_m move-curb-to-curb_m ?curbdest 1
 ?curbdest 1 curb-clear move-car-to-curb ?curbdest 1  is ?curbdest 1 curb-clear_m move-car-to-curb_m ?curbdest 1
 ?curbdest 2 at-curb-num move-car-to-curb ?car?curbdest 2  is ?curbdest 2 at-curb-num_m move-car-to-curb_m ?car?curbdest 2
 ?curbsrc 2 at-curb-num move-curb-to-curb ?car?curbsrc 2  is ?curbsrc 2 at-curb-num_m move-curb-to-curb_m ?car?curbsrc 2
 ?curbsrc 2 at-curb-num move-curb-to-car ?car?curbsrc 2  is ?curbsrc 2 at-curb-num_m move-curb-to-car_m ?car?curbsrc 2
 ?curbsrc 1 curb-clear move-curb-to-car ?curbsrc 1  is ?curbsrc 1 curb-clear_m move-curb-to-car_m ?curbsrc 1
 ?curbsrc 1 curb-clear move-curb-to-curb ?curbsrc 1  is ?curbsrc 1 curb-clear_m move-curb-to-curb_m ?curbsrc 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'move-car-to-car': 'move-car-to-car_m', 'move-car-to-curb': 'move-car-to-curb_m', 'move-curb-to-curb': 'move-curb-to-curb_m', 'move-curb-to-car': 'move-curb-to-car_m'}
###########################
###########################
Predicates mapping
{'car-clear': 'car-clear_m', 'behind-car': 'behind-car_m', 'at-curb-num': 'at-curb-num_m', 'at-curb': 'at-curb_m', 'curb-clear': 'curb-clear_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  0.52
planning_task_time =  0.1
total_task_time =  0.63
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between scanalyzer-3d-sequential-satisficing.pddl and scanalyzer-3d-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
************************************************************
Removing the macros from  scanalyzer-3d-sequential-satisficing.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is not a macro rotate-4
Removing the macros from  scanalyzer-3d-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
The action is not a macro analyze-2_m
The action is not a macro analyze-4_m
The action is not a macro rotate-2_m
The action is not a macro rotate-4_m
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing_swapped_two_atoms_between_two_parts.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'analyze-2': ['analyze-2_m'], 'analyze-4': [], 'rotate-2': ['rotate-2_m'], 'rotate-4': ['rotate-4_m']}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.1
total_task_time =  0.1
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between scanalyzer-3d-sequential-satisficing.pddl and scanalyzer-3d-sequential-satisficing-M.pddl
************************************************************
Removing the macros from  scanalyzer-3d-sequential-satisficing.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is not a macro rotate-4
Removing the macros from  scanalyzer-3d-sequential-satisficing-M.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is a macro analyze-2-rotate-2
The action is not a macro rotate-4
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing-M.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?s1 2 on rotate-2 ?c1?s1 2                is ?s1 2 on rotate-2 ?c1?s1 2
 ?s1 2 on rotate-4 ?c1?s1 2                is ?s1 2 on rotate-4 ?c1?s1 2
 ?s1 2 on analyze-2 ?c1?s1 2               is ?s1 2 on analyze-2 ?c1?s1 2
 ?s1 2 on rotate-4 ?c2?s1 2                is ?s1 2 on rotate-4 ?c2?s1 2
 ?s1 2 cycle-2-with-analysis analyze-2 ?s1?s2 1  is ?s1 2 cycle-2-with-analysis analyze-2 ?s1?s2 1
 ?s1 2 cycle-2 rotate-2 ?s1?s2 1           is ?s1 2 cycle-2 rotate-2 ?s1?s2 1
 ?s1 4 cycle-4 rotate-4 ?s1?s2?s3?s4 1     is ?s1 4 cycle-4 rotate-4 ?s1?s2?s3?s4 1
 ?s1 2 on analyze-4 ?c1?s1 2               is ?s1 2 on analyze-4 ?c1?s1 2
 ?s1 2 on analyze-2 ?c2?s1 2               is ?s1 2 on analyze-2 ?c2?s1 2
 ?s1 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 1  is ?s1 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 1
 ?s1 2 on analyze-4 ?c2?s1 2               is ?s1 2 on analyze-4 ?c2?s1 2
 ?s1 2 on rotate-2 ?c2?s1 2                is ?s1 2 on rotate-2 ?c2?s1 2
 ?s2 2 on rotate-4 ?c3?s2 2                is ?s2 2 on rotate-4 ?c3?s2 2
 ?s2 2 cycle-2-with-analysis analyze-2 ?s1?s2 2  is ?s2 2 cycle-2-with-analysis analyze-2 ?s1?s2 2
 ?s2 2 on rotate-2 ?c2?s2 2                is ?s2 2 on rotate-2 ?c2?s2 2
 ?s2 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 2  is ?s2 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 2
 ?s2 2 on analyze-4 ?c3?s2 2               is ?s2 2 on analyze-4 ?c3?s2 2
 ?s2 2 on analyze-2 ?c1?s2 2               is ?s2 2 on analyze-2 ?c1?s2 2
 ?s2 2 on rotate-2 ?c1?s2 2                is ?s2 2 on rotate-2 ?c1?s2 2
 ?s2 2 cycle-2 rotate-2 ?s1?s2 2           is ?s2 2 cycle-2 rotate-2 ?s1?s2 2
 ?s2 2 on analyze-2 ?c2?s2 2               is ?s2 2 on analyze-2 ?c2?s2 2
 ?s2 2 on rotate-4 ?c2?s2 2                is ?s2 2 on rotate-4 ?c2?s2 2
 ?s2 2 on analyze-4 ?c2?s2 2               is ?s2 2 on analyze-4 ?c2?s2 2
 ?s2 4 cycle-4 rotate-4 ?s1?s2?s3?s4 2     is ?s2 4 cycle-4 rotate-4 ?s1?s2?s3?s4 2
 ?c1 2 on rotate-4 ?c1?s4 1                is ?c1 2 on rotate-4 ?c1?s4 1
 ?c1 2 on analyze-4 ?c1?s1 1               is ?c1 2 on analyze-4 ?c1?s1 1
 ?c1 2 on analyze-4 ?c1?s4 1               is ?c1 2 on analyze-4 ?c1?s4 1
 ?c1 2 on analyze-2 ?c1?s2 1               is ?c1 2 on analyze-2 ?c1?s2 1
 ?c1 2 on rotate-4 ?c1?s1 1                is ?c1 2 on rotate-4 ?c1?s1 1
 ?c1 2 on rotate-2 ?c1?s1 1                is ?c1 2 on rotate-2 ?c1?s1 1
 ?c1 2 on analyze-2 ?c1?s1 1               is ?c1 2 on analyze-2 ?c1?s1 1
 ?c1 1 analyzed analyze-2 ?c1 1            is ?c1 1 analyzed analyze-2 ?c1 1
 ?c1 2 on rotate-2 ?c1?s2 1                is ?c1 2 on rotate-2 ?c1?s2 1
 ?c1 1 analyzed analyze-4 ?c1 1            is ?c1 1 analyzed analyze-4 ?c1 1
 ?c2 2 on rotate-4 ?c2?s1 1                is ?c2 2 on rotate-4 ?c2?s1 1
 ?c2 2 on analyze-2 ?c2?s2 1               is ?c2 2 on analyze-2 ?c2?s2 1
 ?c2 2 on rotate-2 ?c2?s1 1                is ?c2 2 on rotate-2 ?c2?s1 1
 ?c2 2 on rotate-2 ?c2?s2 1                is ?c2 2 on rotate-2 ?c2?s2 1
 ?c2 2 on analyze-4 ?c2?s2 1               is ?c2 2 on analyze-4 ?c2?s2 1
 ?c2 2 on rotate-4 ?c2?s2 1                is ?c2 2 on rotate-4 ?c2?s2 1
 ?c2 2 on analyze-2 ?c2?s1 1               is ?c2 2 on analyze-2 ?c2?s1 1
 ?c2 2 on analyze-4 ?c2?s1 1               is ?c2 2 on analyze-4 ?c2?s1 1
 ?s3 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 3  is ?s3 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 3
 ?s3 2 on analyze-4 ?c4?s3 2               is ?s3 2 on analyze-4 ?c4?s3 2
 ?s3 4 cycle-4 rotate-4 ?s1?s2?s3?s4 3     is ?s3 4 cycle-4 rotate-4 ?s1?s2?s3?s4 3
 ?s3 2 on analyze-4 ?c3?s3 2               is ?s3 2 on analyze-4 ?c3?s3 2
 ?s3 2 on rotate-4 ?c4?s3 2                is ?s3 2 on rotate-4 ?c4?s3 2
 ?s3 2 on rotate-4 ?c3?s3 2                is ?s3 2 on rotate-4 ?c3?s3 2
 ?s4 4 cycle-4 rotate-4 ?s1?s2?s3?s4 4     is ?s4 4 cycle-4 rotate-4 ?s1?s2?s3?s4 4
 ?s4 2 on rotate-4 ?c1?s4 2                is ?s4 2 on rotate-4 ?c1?s4 2
 ?s4 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 4  is ?s4 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 4
 ?s4 2 on analyze-4 ?c1?s4 2               is ?s4 2 on analyze-4 ?c1?s4 2
 ?s4 2 on analyze-4 ?c4?s4 2               is ?s4 2 on analyze-4 ?c4?s4 2
 ?s4 2 on rotate-4 ?c4?s4 2                is ?s4 2 on rotate-4 ?c4?s4 2
 ?c3 2 on analyze-4 ?c3?s3 1               is ?c3 2 on analyze-4 ?c3?s3 1
 ?c3 2 on rotate-4 ?c3?s2 1                is ?c3 2 on rotate-4 ?c3?s2 1
 ?c3 2 on analyze-4 ?c3?s2 1               is ?c3 2 on analyze-4 ?c3?s2 1
 ?c3 2 on rotate-4 ?c3?s3 1                is ?c3 2 on rotate-4 ?c3?s3 1
 ?c4 2 on analyze-4 ?c4?s4 1               is ?c4 2 on analyze-4 ?c4?s4 1
 ?c4 2 on rotate-4 ?c4?s4 1                is ?c4 2 on rotate-4 ?c4?s4 1
 ?c4 2 on analyze-4 ?c4?s3 1               is ?c4 2 on analyze-4 ?c4?s3 1
 ?c4 2 on rotate-4 ?c4?s3 1                is ?c4 2 on rotate-4 ?c4?s3 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'rotate-2': 'rotate-2', 'rotate-4': 'rotate-4', 'analyze-2': 'analyze-2', 'analyze-4': 'analyze-4'}
###########################
###########################
Predicates mapping
{'on': 'on', 'cycle-2-with-analysis': 'cycle-2-with-analysis', 'cycle-2': 'cycle-2', 'cycle-4': 'cycle-4', 'cycle-4-with-analysis': 'cycle-4-with-analysis', 'analyzed': 'analyzed'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  58.77
planning_task_time =  0.12
total_task_time =  58.89
Domain1 and Domain2 are functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between scanalyzer-3d-sequential-satisficing.pddl and scanalyzer-3d-sequential-satisficing_invalid_macro.pddl
************************************************************
Removing the macros from  scanalyzer-3d-sequential-satisficing.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is not a macro rotate-4
Removing the macros from  scanalyzer-3d-sequential-satisficing_invalid_macro.pddl
The action is not a macro analyze-2_m
The action is not a macro analyze-4_m
The action is not a macro rotate-2_m
The action is not a macro rotate-4_m
The action is not a macro analyze-2-analyze-4-rotate-2_m
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing_invalid_macro.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.13
total_task_time =  0.13
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between scanalyzer-3d-sequential-satisficing.pddl and scanalyzer-3d-sequential-satisficing_delete_operator.pddl
************************************************************
Removing the macros from  scanalyzer-3d-sequential-satisficing.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is not a macro rotate-4
Removing the macros from  scanalyzer-3d-sequential-satisficing_delete_operator.pddl
The action is not a macro analyze-4_m
The action is not a macro rotate-2_m
The action is not a macro rotate-4_m
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing_delete_operator.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 are not functionally equivalent! Because they are not potentially redundant and one of them has more primitive operators than the other!
Both domains are not potentially redundant, and one domain has more primitive operators than the other.
Both domains are potentially redundant.
SMT_task_time =  0
planning_task_time =  0.09
total_task_time =  0.09
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between scanalyzer-3d-sequential-satisficing.pddl and scanalyzer-3d-sequential-satisficing_swapped_two_variables_in_atom.pddl
************************************************************
Removing the macros from  scanalyzer-3d-sequential-satisficing.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is not a macro rotate-4
Removing the macros from  scanalyzer-3d-sequential-satisficing_swapped_two_variables_in_atom.pddl
The action is not a macro analyze-2_m
The action is not a macro analyze-4_m
The action is not a macro rotate-2_m
The action is not a macro rotate-4_m
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing_swapped_two_variables_in_atom.pddl
Domain2 is NOT potentially redundant
Domain1 and Domain2 (not potentially redundant) are not functionally equivalent! Because at least one of D1 primitive operators does not have any PFEPO from D2!
{'analyze-2': ['analyze-2_m'], 'analyze-4': [], 'rotate-2': ['rotate-2_m'], 'rotate-4': []}
At least one of D1 primitive operators does not have any PFEPO from D2!
Both domains are not potentially redundant.
SMT_task_time =  0
planning_task_time =  0.11
total_task_time =  0.11
Domain1 and Domain2 are NOT functionally equivalent!
************************************************************
************************************************************
Validating the functional equivalence between scanalyzer-3d-sequential-satisficing.pddl and scanalyzer-3d-sequential-satisficing_valid_macro.pddl
************************************************************
Removing the macros from  scanalyzer-3d-sequential-satisficing.pddl
The action is not a macro analyze-2
The action is not a macro analyze-4
The action is not a macro rotate-2
The action is not a macro rotate-4
Removing the macros from  scanalyzer-3d-sequential-satisficing_valid_macro.pddl
The action is not a macro analyze-2_m
The action is not a macro analyze-4_m
The action is not a macro rotate-2_m
The action is not a macro rotate-4_m
The action is a macro analyze-2-analyze-4-rotate-2_m
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing.pddl
Domain1 is NOT potentially redundant
Checking if the domain specified in this file is potentially redundant domain scanalyzer-3d-sequential-satisficing_valid_macro.pddl
Domain2 is NOT potentially redundant
Generating the SMT constraints...
Searching for a solution for the SMT constraints problem...
 ?s1 2 on rotate-2 ?c1?s1 2                is ?s1 2 on_m rotate-2_m ?c1?s1 2
 ?s1 2 on rotate-4 ?c1?s1 2                is ?s1 2 on_m rotate-4_m ?c1?s1 2
 ?s1 2 on analyze-2 ?c1?s1 2               is ?s1 2 on_m analyze-2_m ?c1?s1 2
 ?s1 2 on rotate-4 ?c2?s1 2                is ?s1 2 on_m rotate-4_m ?c2?s1 2
 ?s1 2 cycle-2-with-analysis analyze-2 ?s1?s2 1  is ?s1 2 cycle-2-with-analysis_m analyze-2_m ?s1?s2 1
 ?s1 2 cycle-2 rotate-2 ?s1?s2 1           is ?s1 2 cycle-2_m rotate-2_m ?s1?s2 1
 ?s1 4 cycle-4 rotate-4 ?s1?s2?s3?s4 1     is ?s1 4 cycle-4_m rotate-4_m ?s1?s2?s3?s4 1
 ?s1 2 on analyze-4 ?c1?s1 2               is ?s1 2 on_m analyze-4_m ?c1?s1 2
 ?s1 2 on analyze-2 ?c2?s1 2               is ?s1 2 on_m analyze-2_m ?c2?s1 2
 ?s1 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 1  is ?s1 4 cycle-4-with-analysis_m analyze-4_m ?s1?s2?s3?s4 1
 ?s1 2 on analyze-4 ?c2?s1 2               is ?s1 2 on_m analyze-4_m ?c2?s1 2
 ?s1 2 on rotate-2 ?c2?s1 2                is ?s1 2 on_m rotate-2_m ?c2?s1 2
 ?s2 2 on rotate-4 ?c3?s2 2                is ?s2 2 on_m rotate-4_m ?c3?s2 2
 ?s2 2 cycle-2-with-analysis analyze-2 ?s1?s2 2  is ?s2 2 cycle-2-with-analysis_m analyze-2_m ?s1?s2 2
 ?s2 2 on rotate-2 ?c2?s2 2                is ?s2 2 on_m rotate-2_m ?c2?s2 2
 ?s2 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 2  is ?s2 4 cycle-4-with-analysis_m analyze-4_m ?s1?s2?s3?s4 2
 ?s2 2 on analyze-4 ?c3?s2 2               is ?s2 2 on_m analyze-4_m ?c3?s2 2
 ?s2 2 on analyze-2 ?c1?s2 2               is ?s2 2 on_m analyze-2_m ?c1?s2 2
 ?s2 2 on rotate-2 ?c1?s2 2                is ?s2 2 on_m rotate-2_m ?c1?s2 2
 ?s2 2 cycle-2 rotate-2 ?s1?s2 2           is ?s2 2 cycle-2_m rotate-2_m ?s1?s2 2
 ?s2 2 on analyze-2 ?c2?s2 2               is ?s2 2 on_m analyze-2_m ?c2?s2 2
 ?s2 2 on rotate-4 ?c2?s2 2                is ?s2 2 on_m rotate-4_m ?c2?s2 2
 ?s2 2 on analyze-4 ?c2?s2 2               is ?s2 2 on_m analyze-4_m ?c2?s2 2
 ?s2 4 cycle-4 rotate-4 ?s1?s2?s3?s4 2     is ?s2 4 cycle-4_m rotate-4_m ?s1?s2?s3?s4 2
 ?c1 2 on rotate-4 ?c1?s4 1                is ?c1 2 on_m rotate-4_m ?c1?s4 1
 ?c1 2 on analyze-4 ?c1?s1 1               is ?c1 2 on_m analyze-4_m ?c1?s1 1
 ?c1 2 on analyze-4 ?c1?s4 1               is ?c1 2 on_m analyze-4_m ?c1?s4 1
 ?c1 2 on analyze-2 ?c1?s2 1               is ?c1 2 on_m analyze-2_m ?c1?s2 1
 ?c1 2 on rotate-4 ?c1?s1 1                is ?c1 2 on_m rotate-4_m ?c1?s1 1
 ?c1 2 on rotate-2 ?c1?s1 1                is ?c1 2 on_m rotate-2_m ?c1?s1 1
 ?c1 2 on analyze-2 ?c1?s1 1               is ?c1 2 on_m analyze-2_m ?c1?s1 1
 ?c1 1 analyzed analyze-2 ?c1 1            is ?c1 1 analyzed_m analyze-2_m ?c1 1
 ?c1 2 on rotate-2 ?c1?s2 1                is ?c1 2 on_m rotate-2_m ?c1?s2 1
 ?c1 1 analyzed analyze-4 ?c1 1            is ?c1 1 analyzed_m analyze-4_m ?c1 1
 ?c2 2 on rotate-4 ?c2?s1 1                is ?c2 2 on_m rotate-4_m ?c2?s1 1
 ?c2 2 on analyze-2 ?c2?s2 1               is ?c2 2 on_m analyze-2_m ?c2?s2 1
 ?c2 2 on rotate-2 ?c2?s1 1                is ?c2 2 on_m rotate-2_m ?c2?s1 1
 ?c2 2 on rotate-2 ?c2?s2 1                is ?c2 2 on_m rotate-2_m ?c2?s2 1
 ?c2 2 on analyze-4 ?c2?s2 1               is ?c2 2 on_m analyze-4_m ?c2?s2 1
 ?c2 2 on rotate-4 ?c2?s2 1                is ?c2 2 on_m rotate-4_m ?c2?s2 1
 ?c2 2 on analyze-2 ?c2?s1 1               is ?c2 2 on_m analyze-2_m ?c2?s1 1
 ?c2 2 on analyze-4 ?c2?s1 1               is ?c2 2 on_m analyze-4_m ?c2?s1 1
 ?s3 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 3  is ?s3 4 cycle-4-with-analysis_m analyze-4_m ?s1?s2?s3?s4 3
 ?s3 2 on analyze-4 ?c4?s3 2               is ?s3 2 on_m analyze-4_m ?c4?s3 2
 ?s3 4 cycle-4 rotate-4 ?s1?s2?s3?s4 3     is ?s3 4 cycle-4_m rotate-4_m ?s1?s2?s3?s4 3
 ?s3 2 on analyze-4 ?c3?s3 2               is ?s3 2 on_m analyze-4_m ?c3?s3 2
 ?s3 2 on rotate-4 ?c4?s3 2                is ?s3 2 on_m rotate-4_m ?c4?s3 2
 ?s3 2 on rotate-4 ?c3?s3 2                is ?s3 2 on_m rotate-4_m ?c3?s3 2
 ?s4 4 cycle-4 rotate-4 ?s1?s2?s3?s4 4     is ?s4 4 cycle-4_m rotate-4_m ?s1?s2?s3?s4 4
 ?s4 2 on rotate-4 ?c1?s4 2                is ?s4 2 on_m rotate-4_m ?c1?s4 2
 ?s4 4 cycle-4-with-analysis analyze-4 ?s1?s2?s3?s4 4  is ?s4 4 cycle-4-with-analysis_m analyze-4_m ?s1?s2?s3?s4 4
 ?s4 2 on analyze-4 ?c1?s4 2               is ?s4 2 on_m analyze-4_m ?c1?s4 2
 ?s4 2 on analyze-4 ?c4?s4 2               is ?s4 2 on_m analyze-4_m ?c4?s4 2
 ?s4 2 on rotate-4 ?c4?s4 2                is ?s4 2 on_m rotate-4_m ?c4?s4 2
 ?c3 2 on analyze-4 ?c3?s3 1               is ?c3 2 on_m analyze-4_m ?c3?s3 1
 ?c3 2 on rotate-4 ?c3?s2 1                is ?c3 2 on_m rotate-4_m ?c3?s2 1
 ?c3 2 on analyze-4 ?c3?s2 1               is ?c3 2 on_m analyze-4_m ?c3?s2 1
 ?c3 2 on rotate-4 ?c3?s3 1                is ?c3 2 on_m rotate-4_m ?c3?s3 1
 ?c4 2 on analyze-4 ?c4?s4 1               is ?c4 2 on_m analyze-4_m ?c4?s4 1
 ?c4 2 on rotate-4 ?c4?s4 1                is ?c4 2 on_m rotate-4_m ?c4?s4 1
 ?c4 2 on analyze-4 ?c4?s3 1               is ?c4 2 on_m analyze-4_m ?c4?s3 1
 ?c4 2 on rotate-4 ?c4?s3 1                is ?c4 2 on_m rotate-4_m ?c4?s3 1
Domain1 and Domain2 are functionally equivalent!
###########################
Primitive operators mapping
{'rotate-2': 'rotate-2_m', 'rotate-4': 'rotate-4_m', 'analyze-2': 'analyze-2_m', 'analyze-4': 'analyze-4_m'}
###########################
###########################
Predicates mapping
{'on': 'on_m', 'cycle-2-with-analysis': 'cycle-2-with-analysis_m', 'cycle-2': 'cycle-2_m', 'cycle-4': 'cycle-4_m', 'cycle-4-with-analysis': 'cycle-4-with-analysis_m', 'analyzed': 'analyzed_m'}
###########################
There is a predicate consistent mapping from the atoms of the primitive operators of D1 to the atoms of the primitive operators of D2 as per the operator-structure theorem !
Both domains are not potentially redundant.
SMT_task_time =  50.05
planning_task_time =  0.13
total_task_time =  50.18
Domain1 and Domain2 are functionally equivalent!
(base) anas@anas-Latitude-7480:~/Functional-Equivalence/UsingPlanner/Code-from-KI2021-for-JAIR-new-approach$ 
